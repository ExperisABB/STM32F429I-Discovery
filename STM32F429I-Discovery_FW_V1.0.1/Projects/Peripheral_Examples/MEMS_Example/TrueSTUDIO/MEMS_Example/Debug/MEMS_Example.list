
MEMS_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  08001e60  08001e60  00011e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          00000074  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000094  20000094  00020020  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000add7  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019d2  00000000  00000000  0002ae25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005171  00000000  00000000  0002c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008f0  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000908  00000000  00000000  00032258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003c4f  00000000  00000000  00032b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a5c  00000000  00000000  000367af  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003a20b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000015a4  00000000  00000000  0003a288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001e48 	.word	0x08001e48

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08001e48 	.word	0x08001e48

080001ec <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 80001ec:	b570      	push	{r4, r5, r6, lr}
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80001ee:	4c15      	ldr	r4, [pc, #84]	; (8000244 <L3GD20_SendByte+0x58>)
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80001f0:	4e15      	ldr	r6, [pc, #84]	; (8000248 <L3GD20_SendByte+0x5c>)
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80001f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80001f6:	4605      	mov	r5, r0
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80001f8:	6023      	str	r3, [r4, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80001fa:	2102      	movs	r1, #2
 80001fc:	4630      	mov	r0, r6
 80001fe:	f001 fb5f 	bl	80018c0 <SPI_I2S_GetFlagStatus>
 8000202:	b180      	cbz	r0, 8000226 <L3GD20_SendByte+0x3a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 8000204:	4629      	mov	r1, r5
 8000206:	4810      	ldr	r0, [pc, #64]	; (8000248 <L3GD20_SendByte+0x5c>)
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8000208:	4d0f      	ldr	r5, [pc, #60]	; (8000248 <L3GD20_SendByte+0x5c>)
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 800020a:	f001 fb57 	bl	80018bc <SPI_I2S_SendData>
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 800020e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000212:	6023      	str	r3, [r4, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8000214:	2101      	movs	r1, #1
 8000216:	4628      	mov	r0, r5
 8000218:	f001 fb52 	bl	80018c0 <SPI_I2S_GetFlagStatus>
 800021c:	b160      	cbz	r0, 8000238 <L3GD20_SendByte+0x4c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 800021e:	480a      	ldr	r0, [pc, #40]	; (8000248 <L3GD20_SendByte+0x5c>)
 8000220:	f001 fb49 	bl	80018b6 <SPI_I2S_ReceiveData>
 8000224:	e006      	b.n	8000234 <L3GD20_SendByte+0x48>
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8000226:	6823      	ldr	r3, [r4, #0]
 8000228:	1e5a      	subs	r2, r3, #1
 800022a:	6022      	str	r2, [r4, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1e4      	bne.n	80001fa <L3GD20_SendByte+0xe>
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8000230:	f001 fd44 	bl	8001cbc <L3GD20_TIMEOUT_UserCallback>
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 8000234:	b2c0      	uxtb	r0, r0
}
 8000236:	bd70      	pop	{r4, r5, r6, pc}
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8000238:	6823      	ldr	r3, [r4, #0]
 800023a:	1e5a      	subs	r2, r3, #1
 800023c:	6022      	str	r2, [r4, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d1e8      	bne.n	8000214 <L3GD20_SendByte+0x28>
 8000242:	e7f5      	b.n	8000230 <L3GD20_SendByte+0x44>
 8000244:	20000000 	.word	0x20000000
 8000248:	40015000 	.word	0x40015000

0800024c <L3GD20_Write>:
  if(NumByteToWrite > 0x01)
 800024c:	2a01      	cmp	r2, #1
{
 800024e:	b570      	push	{r4, r5, r6, lr}
 8000250:	460d      	mov	r5, r1
 8000252:	4606      	mov	r6, r0
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000254:	bf88      	it	hi
 8000256:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  L3GD20_CS_LOW();
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <L3GD20_Write+0x3c>)
 800025c:	2102      	movs	r1, #2
{
 800025e:	4614      	mov	r4, r2
  L3GD20_CS_LOW();
 8000260:	f001 f908 	bl	8001474 <GPIO_ResetBits>
  L3GD20_SendByte(WriteAddr);
 8000264:	4628      	mov	r0, r5
 8000266:	f7ff ffc1 	bl	80001ec <L3GD20_SendByte>
  while(NumByteToWrite >= 0x01)
 800026a:	b92c      	cbnz	r4, 8000278 <L3GD20_Write+0x2c>
  L3GD20_CS_HIGH();
 800026c:	2102      	movs	r1, #2
 800026e:	4806      	ldr	r0, [pc, #24]	; (8000288 <L3GD20_Write+0x3c>)
}
 8000270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L3GD20_CS_HIGH();
 8000274:	f001 b8fc 	b.w	8001470 <GPIO_SetBits>
    L3GD20_SendByte(*pBuffer);
 8000278:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 800027c:	3c01      	subs	r4, #1
    L3GD20_SendByte(*pBuffer);
 800027e:	f7ff ffb5 	bl	80001ec <L3GD20_SendByte>
    NumByteToWrite--;
 8000282:	b2a4      	uxth	r4, r4
 8000284:	e7f1      	b.n	800026a <L3GD20_Write+0x1e>
 8000286:	bf00      	nop
 8000288:	40020800 	.word	0x40020800

0800028c <L3GD20_Init>:
{  
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	b088      	sub	sp, #32
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8000292:	2400      	movs	r4, #0
{  
 8000294:	4607      	mov	r7, r0
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 8000296:	2101      	movs	r1, #1
 8000298:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 800029c:	f88d 4002 	strb.w	r4, [sp, #2]
 80002a0:	f88d 4003 	strb.w	r4, [sp, #3]
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 80002a4:	f001 fa3c 	bl	8001720 <RCC_APB2PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	2020      	movs	r0, #32
 80002ac:	f001 fa20 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	2004      	movs	r0, #4
 80002b4:	f001 fa1c 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4608      	mov	r0, r1
  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 80002bc:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800040c <L3GD20_Init+0x180>
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 80002c0:	f001 fa16 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	4608      	mov	r0, r1
 80002c8:	f001 fa12 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 80002cc:	4640      	mov	r0, r8
 80002ce:	2205      	movs	r2, #5
 80002d0:	2107      	movs	r1, #7
 80002d2:	f001 f8d6 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 80002d6:	4640      	mov	r0, r8
 80002d8:	2205      	movs	r2, #5
 80002da:	2108      	movs	r1, #8
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 80002dc:	ad08      	add	r5, sp, #32
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 80002de:	f001 f8d0 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 80002e2:	2205      	movs	r2, #5
 80002e4:	4640      	mov	r0, r8
 80002e6:	2109      	movs	r1, #9
 80002e8:	f001 f8cb 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	f845 3d1c 	str.w	r3, [r5, #-28]!
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80002f2:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80002f6:	2601      	movs	r6, #1
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80002f8:	4629      	mov	r1, r5
 80002fa:	4640      	mov	r0, r8
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002fc:	f88d 400a 	strb.w	r4, [sp, #10]
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 8000300:	f44f 7a00 	mov.w	sl, #512	; 0x200
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000304:	f88d 9008 	strb.w	r9, [sp, #8]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8000308:	f88d 900b 	strb.w	r9, [sp, #11]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800030c:	f88d 6009 	strb.w	r6, [sp, #9]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000310:	f001 f860 	bl	80013d4 <GPIO_Init>
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000314:	4629      	mov	r1, r5
 8000316:	4640      	mov	r0, r8
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 8000318:	f8cd a004 	str.w	sl, [sp, #4]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800031c:	f001 f85a 	bl	80013d4 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 8000320:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8000324:	4629      	mov	r1, r5
 8000326:	4640      	mov	r0, r8
  SPI_I2S_DeInit(L3GD20_SPI);
 8000328:	f5a8 4844 	sub.w	r8, r8, #50176	; 0xc400
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 800032c:	9301      	str	r3, [sp, #4]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800032e:	f001 f851 	bl	80013d4 <GPIO_Init>
  SPI_I2S_DeInit(L3GD20_SPI);
 8000332:	4640      	mov	r0, r8
 8000334:	f001 fa38 	bl	80017a8 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000338:	f44f 7382 	mov.w	r3, #260	; 0x104
 800033c:	f8ad 300e 	strh.w	r3, [sp, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8000340:	2318      	movs	r3, #24
 8000342:	f8ad 3018 	strh.w	r3, [sp, #24]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 8000346:	a903      	add	r1, sp, #12
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000348:	2307      	movs	r3, #7
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 800034a:	4640      	mov	r0, r8
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 800034c:	f8ad 301c 	strh.w	r3, [sp, #28]
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000350:	f8ad 400c 	strh.w	r4, [sp, #12]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000354:	f8ad 4010 	strh.w	r4, [sp, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000358:	f8ad 4012 	strh.w	r4, [sp, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800035c:	f8ad 4014 	strh.w	r4, [sp, #20]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000360:	f8ad 401a 	strh.w	r4, [sp, #26]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000364:	f8ad a016 	strh.w	sl, [sp, #22]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 8000368:	f001 fa7a 	bl	8001860 <SPI_Init>
  SPI_Cmd(L3GD20_SPI, ENABLE);
 800036c:	4631      	mov	r1, r6
 800036e:	4640      	mov	r0, r8
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8000370:	f508 4838 	add.w	r8, r8, #47104	; 0xb800
  SPI_Cmd(L3GD20_SPI, ENABLE);
 8000374:	f001 fa93 	bl	800189e <SPI_Cmd>
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8000378:	4629      	mov	r1, r5
 800037a:	4640      	mov	r0, r8
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800037c:	f88d 400a 	strb.w	r4, [sp, #10]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000380:	f88d 400b 	strb.w	r4, [sp, #11]
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 8000384:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000388:	f88d 6008 	strb.w	r6, [sp, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800038c:	f88d 6009 	strb.w	r6, [sp, #9]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8000390:	f001 f820 	bl	80013d4 <GPIO_Init>
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 8000394:	4649      	mov	r1, r9
 8000396:	4640      	mov	r0, r8
 8000398:	f001 f86a 	bl	8001470 <GPIO_SetBits>
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800039c:	f88d 4008 	strb.w	r4, [sp, #8]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80003a0:	f88d 400b 	strb.w	r4, [sp, #11]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 80003a4:	4c18      	ldr	r4, [pc, #96]	; (8000408 <L3GD20_Init+0x17c>)
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 80003a6:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 80003aa:	4629      	mov	r1, r5
 80003ac:	4620      	mov	r0, r4
 80003ae:	f001 f811 	bl	80013d4 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 80003b2:	2304      	movs	r3, #4
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 80003b4:	4629      	mov	r1, r5
 80003b6:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 80003b8:	9301      	str	r3, [sp, #4]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 80003ba:	f001 f80b 	bl	80013d4 <GPIO_Init>
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 80003be:	787a      	ldrb	r2, [r7, #1]
 80003c0:	783b      	ldrb	r3, [r7, #0]
 80003c2:	4313      	orrs	r3, r2
 80003c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	78ba      	ldrb	r2, [r7, #2]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	78fa      	ldrb	r2, [r7, #3]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f88d 3002 	strb.w	r3, [sp, #2]
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 80003d6:	797a      	ldrb	r2, [r7, #5]
 80003d8:	793b      	ldrb	r3, [r7, #4]
 80003da:	4313      	orrs	r3, r2
 80003dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	79ba      	ldrb	r2, [r7, #6]
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 80003e4:	eb0d 0009 	add.w	r0, sp, r9
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 80003e8:	4313      	orrs	r3, r2
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 80003ea:	2120      	movs	r1, #32
 80003ec:	4632      	mov	r2, r6
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 80003ee:	f88d 3003 	strb.w	r3, [sp, #3]
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 80003f2:	f7ff ff2b 	bl	800024c <L3GD20_Write>
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 80003f6:	4632      	mov	r2, r6
 80003f8:	2123      	movs	r1, #35	; 0x23
 80003fa:	f10d 0003 	add.w	r0, sp, #3
 80003fe:	f7ff ff25 	bl	800024c <L3GD20_Write>
}
 8000402:	b008      	add	sp, #32
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	40020000 	.word	0x40020000
 800040c:	40021400 	.word	0x40021400

08000410 <L3GD20_Read>:
  if(NumByteToRead > 0x01)
 8000410:	2a01      	cmp	r2, #1
{  
 8000412:	b570      	push	{r4, r5, r6, lr}
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000414:	bf8c      	ite	hi
 8000416:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800041a:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
{  
 800041e:	4606      	mov	r6, r0
  L3GD20_CS_LOW();
 8000420:	2102      	movs	r1, #2
 8000422:	480b      	ldr	r0, [pc, #44]	; (8000450 <L3GD20_Read+0x40>)
{  
 8000424:	4614      	mov	r4, r2
  L3GD20_CS_LOW();
 8000426:	f001 f825 	bl	8001474 <GPIO_ResetBits>
  L3GD20_SendByte(ReadAddr);
 800042a:	4628      	mov	r0, r5
 800042c:	f7ff fede 	bl	80001ec <L3GD20_SendByte>
  while(NumByteToRead > 0x00)
 8000430:	b92c      	cbnz	r4, 800043e <L3GD20_Read+0x2e>
  L3GD20_CS_HIGH();
 8000432:	2102      	movs	r1, #2
 8000434:	4806      	ldr	r0, [pc, #24]	; (8000450 <L3GD20_Read+0x40>)
}  
 8000436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L3GD20_CS_HIGH();
 800043a:	f001 b819 	b.w	8001470 <GPIO_SetBits>
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 800043e:	2000      	movs	r0, #0
 8000440:	f7ff fed4 	bl	80001ec <L3GD20_SendByte>
    NumByteToRead--;
 8000444:	3c01      	subs	r4, #1
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 8000446:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 800044a:	b2a4      	uxth	r4, r4
 800044c:	e7f0      	b.n	8000430 <L3GD20_Read+0x20>
 800044e:	bf00      	nop
 8000450:	40020800 	.word	0x40020800

08000454 <L3GD20_FilterConfig>:
{
 8000454:	b513      	push	{r0, r1, r4, lr}
 8000456:	4604      	mov	r4, r0
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000458:	2201      	movs	r2, #1
 800045a:	f10d 0007 	add.w	r0, sp, #7
 800045e:	2121      	movs	r1, #33	; 0x21
 8000460:	f7ff ffd6 	bl	8000410 <L3GD20_Read>
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8000464:	7862      	ldrb	r2, [r4, #1]
 8000466:	7823      	ldrb	r3, [r4, #0]
 8000468:	4313      	orrs	r3, r2
  tmpreg &= 0xC0;
 800046a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800046e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8000472:	4313      	orrs	r3, r2
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000474:	2121      	movs	r1, #33	; 0x21
 8000476:	2201      	movs	r2, #1
 8000478:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800047c:	f88d 3007 	strb.w	r3, [sp, #7]
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000480:	f7ff fee4 	bl	800024c <L3GD20_Write>
}
 8000484:	b002      	add	sp, #8
 8000486:	bd10      	pop	{r4, pc}

08000488 <L3GD20_FilterCmd>:
 {
 8000488:	b513      	push	{r0, r1, r4, lr}
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800048a:	2201      	movs	r2, #1
 {
 800048c:	4604      	mov	r4, r0
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800048e:	2124      	movs	r1, #36	; 0x24
 8000490:	f10d 0007 	add.w	r0, sp, #7
 8000494:	f7ff ffbc 	bl	8000410 <L3GD20_Read>
  tmpreg &= 0xEF;
 8000498:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800049c:	f023 0310 	bic.w	r3, r3, #16
  tmpreg |= HighPassFilterState;
 80004a0:	431c      	orrs	r4, r3
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2124      	movs	r1, #36	; 0x24
 80004a6:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 80004aa:	f88d 4007 	strb.w	r4, [sp, #7]
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80004ae:	f7ff fecd 	bl	800024c <L3GD20_Write>
}
 80004b2:	b002      	add	sp, #8
 80004b4:	bd10      	pop	{r4, pc}
	...

080004b8 <LCD_ChipSelect.part.0>:
  */
void LCD_ChipSelect(FunctionalState NewState)
{
  if (NewState == DISABLE)
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 80004b8:	2104      	movs	r1, #4
 80004ba:	4801      	ldr	r0, [pc, #4]	; (80004c0 <LCD_ChipSelect.part.0+0x8>)
 80004bc:	f000 bfda 	b.w	8001474 <GPIO_ResetBits>
 80004c0:	40020800 	.word	0x40020800

080004c4 <delay.constprop.2>:
/**
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
 80004c4:	b082      	sub	sp, #8
{
  __IO uint32_t index = 0; 
 80004c6:	2300      	movs	r3, #0
 80004c8:	9301      	str	r3, [sp, #4]
  for(index = nCount; index != 0; index--)
 80004ca:	23c8      	movs	r3, #200	; 0xc8
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	9b01      	ldr	r3, [sp, #4]
 80004d0:	b90b      	cbnz	r3, 80004d6 <delay.constprop.2+0x12>
  {
  }
}
 80004d2:	b002      	add	sp, #8
 80004d4:	4770      	bx	lr
  for(index = nCount; index != 0; index--)
 80004d6:	9b01      	ldr	r3, [sp, #4]
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7f7      	b.n	80004cc <delay.constprop.2+0x8>

080004dc <LCD_LayerInit>:
{
 80004dc:	b530      	push	{r4, r5, lr}
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 80004de:	2204      	movs	r2, #4
{
 80004e0:	b091      	sub	sp, #68	; 0x44
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 80004e2:	201e      	movs	r0, #30
 80004e4:	f240 110d 	movw	r1, #269	; 0x10d
 80004e8:	f240 1343 	movw	r3, #323	; 0x143
 80004ec:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 80004f0:	2302      	movs	r3, #2
 80004f2:	9304      	str	r3, [sp, #16]
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80004f4:	23ff      	movs	r3, #255	; 0xff
 80004f6:	9305      	str	r3, [sp, #20]
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80004f8:	2300      	movs	r3, #0
 80004fa:	9306      	str	r3, [sp, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80004fc:	9307      	str	r3, [sp, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80004fe:	9308      	str	r3, [sp, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8000500:	9309      	str	r3, [sp, #36]	; 0x24
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	930a      	str	r3, [sp, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8000508:	2305      	movs	r3, #5
 800050a:	930b      	str	r3, [sp, #44]	; 0x2c
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 800050c:	f240 13e3 	movw	r3, #483	; 0x1e3
 8000510:	930d      	str	r3, [sp, #52]	; 0x34
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8000512:	4d18      	ldr	r5, [pc, #96]	; (8000574 <LCD_LayerInit+0x98>)
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8000514:	4c18      	ldr	r4, [pc, #96]	; (8000578 <LCD_LayerInit+0x9c>)
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8000516:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800051a:	930e      	str	r3, [sp, #56]	; 0x38
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 800051c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000520:	930f      	str	r3, [sp, #60]	; 0x3c
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8000522:	4669      	mov	r1, sp
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8000524:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8000528:	4628      	mov	r0, r5
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 800052a:	930c      	str	r3, [sp, #48]	; 0x30
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 800052c:	f001 f828 	bl	8001580 <LTDC_LayerInit>
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <LCD_LayerInit+0xa0>)
 8000532:	930c      	str	r3, [sp, #48]	; 0x30
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8000534:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8000538:	4669      	mov	r1, sp
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 800053a:	930a      	str	r3, [sp, #40]	; 0x28
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 800053c:	4620      	mov	r0, r4
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 800053e:	2307      	movs	r3, #7
 8000540:	930b      	str	r3, [sp, #44]	; 0x2c
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8000542:	f001 f81d 	bl	8001580 <LTDC_LayerInit>
  LTDC_ReloadConfig(LTDC_IMReload);
 8000546:	2001      	movs	r0, #1
 8000548:	f001 f814 	bl	8001574 <LTDC_ReloadConfig>
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 800054c:	4628      	mov	r0, r5
 800054e:	2101      	movs	r1, #1
 8000550:	f001 f863 	bl	800161a <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8000554:	2101      	movs	r1, #1
 8000556:	4620      	mov	r0, r4
 8000558:	f001 f85f 	bl	800161a <LTDC_LayerCmd>
  LTDC_ReloadConfig(LTDC_IMReload);
 800055c:	2001      	movs	r0, #1
 800055e:	f001 f809 	bl	8001574 <LTDC_ReloadConfig>
  LCD_Currentfonts = fonts;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <LCD_LayerInit+0xa4>)
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <LCD_LayerInit+0xa8>)
 8000566:	601a      	str	r2, [r3, #0]
  LTDC_DitherCmd(ENABLE);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fff7 	bl	800155c <LTDC_DitherCmd>
}
 800056e:	b011      	add	sp, #68	; 0x44
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	40016884 	.word	0x40016884
 8000578:	40016904 	.word	0x40016904
 800057c:	d0050000 	.word	0xd0050000
 8000580:	20000044 	.word	0x20000044
 8000584:	20000008 	.word	0x20000008

08000588 <LCD_ChipSelect>:
  if (NewState == DISABLE)
 8000588:	b908      	cbnz	r0, 800058e <LCD_ChipSelect+0x6>
 800058a:	f7ff bf95 	b.w	80004b8 <LCD_ChipSelect.part.0>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 800058e:	2104      	movs	r1, #4
 8000590:	4801      	ldr	r0, [pc, #4]	; (8000598 <LCD_ChipSelect+0x10>)
 8000592:	f000 bf6d 	b.w	8001470 <GPIO_SetBits>
 8000596:	bf00      	nop
 8000598:	40020800 	.word	0x40020800

0800059c <LCD_SetLayer>:
{
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <LCD_SetLayer+0x1c>)
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <LCD_SetLayer+0x20>)
  if (Layerx == LCD_BACKGROUND_LAYER)
 80005a0:	b920      	cbnz	r0, 80005ac <LCD_SetLayer+0x10>
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 80005a2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80005a6:	6011      	str	r1, [r2, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 80005a8:	6018      	str	r0, [r3, #0]
 80005aa:	4770      	bx	lr
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80005ac:	4904      	ldr	r1, [pc, #16]	; (80005c0 <LCD_SetLayer+0x24>)
 80005ae:	6011      	str	r1, [r2, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000004 	.word	0x20000004
 80005bc:	2000003c 	.word	0x2000003c
 80005c0:	d0050000 	.word	0xd0050000

080005c4 <LCD_SetTextColor>:
  CurrentTextColor = Color;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <LCD_SetTextColor+0x8>)
 80005c6:	8018      	strh	r0, [r3, #0]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000040 	.word	0x20000040

080005d0 <LCD_Clear>:
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <LCD_Clear+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f503 2220 	add.w	r2, r3, #655360	; 0xa0000
 80005d8:	f823 0b02 	strh.w	r0, [r3], #2
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d1fb      	bne.n	80005d8 <LCD_Clear+0x8>
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004

080005e8 <LCD_DrawLine>:
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	461f      	mov	r7, r3
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <LCD_DrawLine+0x6c>)
 80005ee:	25f0      	movs	r5, #240	; 0xf0
 80005f0:	fb05 0101 	mla	r1, r5, r1, r0
 80005f4:	681d      	ldr	r5, [r3, #0]
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <LCD_DrawLine+0x70>)
{
 80005f8:	b08b      	sub	sp, #44	; 0x2c
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 80005fa:	881c      	ldrh	r4, [r3, #0]
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 80005fc:	eb05 0541 	add.w	r5, r5, r1, lsl #1
{
 8000600:	4616      	mov	r6, r2
  DMA2D_DeInit();  
 8000602:	f000 fde7 	bl	80011d4 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8000606:	2302      	movs	r3, #2
 8000608:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800060c:	e88d 000c 	stmia.w	sp, {r2, r3}
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8000610:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8000614:	9303      	str	r3, [sp, #12]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8000616:	f004 031f 	and.w	r3, r4, #31
 800061a:	9302      	str	r3, [sp, #8]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 800061c:	0ae4      	lsrs	r4, r4, #11
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 800061e:	230f      	movs	r3, #15
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8000620:	9404      	str	r4, [sp, #16]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8000622:	9305      	str	r3, [sp, #20]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 8000624:	9506      	str	r5, [sp, #24]
 8000626:	2101      	movs	r1, #1
  if(Direction == LCD_DIR_HORIZONTAL)
 8000628:	b977      	cbnz	r7, 8000648 <LCD_DrawLine+0x60>
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 800062a:	9707      	str	r7, [sp, #28]
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 800062c:	9108      	str	r1, [sp, #32]
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 800062e:	9609      	str	r6, [sp, #36]	; 0x24
  DMA2D_Init(&DMA2D_InitStruct);  
 8000630:	4668      	mov	r0, sp
 8000632:	f000 fddd 	bl	80011f0 <DMA2D_Init>
  DMA2D_StartTransfer();  
 8000636:	f000 fe2f 	bl	8001298 <DMA2D_StartTransfer>
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 800063a:	2002      	movs	r0, #2
 800063c:	f000 fe34 	bl	80012a8 <DMA2D_GetFlagStatus>
 8000640:	2800      	cmp	r0, #0
 8000642:	d0fa      	beq.n	800063a <LCD_DrawLine+0x52>
}
 8000644:	b00b      	add	sp, #44	; 0x2c
 8000646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8000648:	23ef      	movs	r3, #239	; 0xef
 800064a:	9307      	str	r3, [sp, #28]
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 800064c:	9608      	str	r6, [sp, #32]
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 800064e:	9109      	str	r1, [sp, #36]	; 0x24
 8000650:	e7ee      	b.n	8000630 <LCD_DrawLine+0x48>
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000040 	.word	0x20000040

0800065c <LCD_DrawFullRect>:
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	461f      	mov	r7, r3
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <LCD_DrawFullRect+0x60>)
 8000662:	881c      	ldrh	r4, [r3, #0]
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <LCD_DrawFullRect+0x64>)
 8000666:	25f0      	movs	r5, #240	; 0xf0
 8000668:	fb05 0101 	mla	r1, r5, r1, r0
 800066c:	681d      	ldr	r5, [r3, #0]
{
 800066e:	b08b      	sub	sp, #44	; 0x2c
 8000670:	4616      	mov	r6, r2
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8000672:	eb05 0541 	add.w	r5, r5, r1, lsl #1
  DMA2D_DeInit();
 8000676:	f000 fdad 	bl	80011d4 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 800067a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800067e:	2302      	movs	r3, #2
 8000680:	e88d 000c 	stmia.w	sp, {r2, r3}
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8000684:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8000688:	9303      	str	r3, [sp, #12]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 800068a:	f004 031f 	and.w	r3, r4, #31
 800068e:	9302      	str	r3, [sp, #8]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8000690:	230f      	movs	r3, #15
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8000692:	0ae4      	lsrs	r4, r4, #11
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8000694:	9305      	str	r3, [sp, #20]
  DMA2D_Init(&DMA2D_InitStruct); 
 8000696:	4668      	mov	r0, sp
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 8000698:	f1c6 03f0 	rsb	r3, r6, #240	; 0xf0
 800069c:	9307      	str	r3, [sp, #28]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 800069e:	9404      	str	r4, [sp, #16]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 80006a0:	9506      	str	r5, [sp, #24]
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 80006a2:	9708      	str	r7, [sp, #32]
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 80006a4:	9609      	str	r6, [sp, #36]	; 0x24
  DMA2D_Init(&DMA2D_InitStruct); 
 80006a6:	f000 fda3 	bl	80011f0 <DMA2D_Init>
  DMA2D_StartTransfer();
 80006aa:	f000 fdf5 	bl	8001298 <DMA2D_StartTransfer>
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 80006ae:	2002      	movs	r0, #2
 80006b0:	f000 fdfa 	bl	80012a8 <DMA2D_GetFlagStatus>
 80006b4:	2800      	cmp	r0, #0
 80006b6:	d0fa      	beq.n	80006ae <LCD_DrawFullRect+0x52>
}
 80006b8:	b00b      	add	sp, #44	; 0x2c
 80006ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006bc:	20000040 	.word	0x20000040
 80006c0:	20000004 	.word	0x20000004

080006c4 <LCD_DrawUniLine>:
{
 80006c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80006c8:	1a14      	subs	r4, r2, r0
 80006ca:	2c00      	cmp	r4, #0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80006cc:	eba3 0701 	sub.w	r7, r3, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80006d0:	bfb8      	it	lt
 80006d2:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	bfb8      	it	lt
 80006d8:	427f      	neglt	r7, r7
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80006da:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80006dc:	b23f      	sxth	r7, r7
    xinc1 = 1;
 80006de:	4282      	cmp	r2, r0
 80006e0:	bf34      	ite	cc
 80006e2:	f04f 38ff 	movcc.w	r8, #4294967295
 80006e6:	f04f 0801 	movcs.w	r8, #1
    yinc1 = 1;
 80006ea:	428b      	cmp	r3, r1
 80006ec:	bf34      	ite	cc
 80006ee:	f04f 39ff 	movcc.w	r9, #4294967295
 80006f2:	f04f 0901 	movcs.w	r9, #1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80006f6:	42bc      	cmp	r4, r7
{
 80006f8:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
 80006fa:	fa0f fa80 	sxth.w	sl, r0
  y = y1;                       /* Start y off at the first pixel */
 80006fe:	b20e      	sxth	r6, r1
 8000700:	f04f 0502 	mov.w	r5, #2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8000704:	db10      	blt.n	8000728 <LCD_DrawUniLine+0x64>
    num = deltax / 2;
 8000706:	fb94 f5f5 	sdiv	r5, r4, r5
 800070a:	f8cd 8008 	str.w	r8, [sp, #8]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800070e:	f04f 0800 	mov.w	r8, #0
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8000712:	f8cd 800c 	str.w	r8, [sp, #12]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000716:	2300      	movs	r3, #0
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800071e:	429c      	cmp	r4, r3
 8000720:	da0f      	bge.n	8000742 <LCD_DrawUniLine+0x7e>
}
 8000722:	b005      	add	sp, #20
 8000724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8000728:	4623      	mov	r3, r4
 800072a:	f8cd 900c 	str.w	r9, [sp, #12]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800072e:	f04f 0900 	mov.w	r9, #0
    num = deltay / 2;
 8000732:	fb97 f5f5 	sdiv	r5, r7, r5
 8000736:	463c      	mov	r4, r7
 8000738:	b22d      	sxth	r5, r5
 800073a:	461f      	mov	r7, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800073c:	f8cd 9008 	str.w	r9, [sp, #8]
 8000740:	e7e9      	b.n	8000716 <LCD_DrawUniLine+0x52>
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8000742:	fa1f fb8a 	uxth.w	fp, sl
 8000746:	f1bb 0fef 	cmp.w	fp, #239	; 0xef
 800074a:	d808      	bhi.n	800075e <LCD_DrawUniLine+0x9a>
 800074c:	b2b1      	uxth	r1, r6
 800074e:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8000752:	d204      	bcs.n	800075e <LCD_DrawUniLine+0x9a>
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 8000754:	2300      	movs	r3, #0
 8000756:	2201      	movs	r2, #1
 8000758:	4658      	mov	r0, fp
 800075a:	f7ff ff45 	bl	80005e8 <LCD_DrawLine>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 800075e:	443d      	add	r5, r7
 8000760:	b2ab      	uxth	r3, r5
 8000762:	b21d      	sxth	r5, r3
    if (num >= den)             /* Check if numerator >= denominator */
 8000764:	42ac      	cmp	r4, r5
 8000766:	dc07      	bgt.n	8000778 <LCD_DrawUniLine+0xb4>
      num -= den;               /* Calculate the new numerator value */
 8000768:	1b1d      	subs	r5, r3, r4
      x += xinc1;               /* Change the x as appropriate */
 800076a:	eb0b 0a08 	add.w	sl, fp, r8
      y += yinc1;               /* Change the y as appropriate */
 800076e:	444e      	add	r6, r9
      num -= den;               /* Calculate the new numerator value */
 8000770:	b22d      	sxth	r5, r5
      x += xinc1;               /* Change the x as appropriate */
 8000772:	fa0f fa8a 	sxth.w	sl, sl
      y += yinc1;               /* Change the y as appropriate */
 8000776:	b236      	sxth	r6, r6
    x += xinc2;                 /* Change the x as appropriate */
 8000778:	9b02      	ldr	r3, [sp, #8]
 800077a:	449a      	add	sl, r3
    y += yinc2;                 /* Change the y as appropriate */
 800077c:	9b03      	ldr	r3, [sp, #12]
 800077e:	441e      	add	r6, r3
 8000780:	9b01      	ldr	r3, [sp, #4]
    x += xinc2;                 /* Change the x as appropriate */
 8000782:	fa0f fa8a 	sxth.w	sl, sl
    y += yinc2;                 /* Change the y as appropriate */
 8000786:	b236      	sxth	r6, r6
 8000788:	3301      	adds	r3, #1
 800078a:	e7c5      	b.n	8000718 <LCD_DrawUniLine+0x54>

0800078c <LCD_FillTriangle>:
{ 
 800078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000790:	b087      	sub	sp, #28
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8000792:	1a0c      	subs	r4, r1, r0
{ 
 8000794:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8000798:	9204      	str	r2, [sp, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800079a:	eba8 0603 	sub.w	r6, r8, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800079e:	2c00      	cmp	r4, #0
 80007a0:	bfb8      	it	lt
 80007a2:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80007a4:	2e00      	cmp	r6, #0
 80007a6:	bfb8      	it	lt
 80007a8:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80007aa:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80007ac:	b236      	sxth	r6, r6
{ 
 80007ae:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 80007b2:	9205      	str	r2, [sp, #20]
    xinc1 = -1;
 80007b4:	4281      	cmp	r1, r0
 80007b6:	bf2c      	ite	cs
 80007b8:	2701      	movcs	r7, #1
 80007ba:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 80007be:	4598      	cmp	r8, r3
 80007c0:	bf2c      	ite	cs
 80007c2:	f04f 0801 	movcs.w	r8, #1
 80007c6:	f04f 38ff 	movcc.w	r8, #4294967295
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80007ca:	42b4      	cmp	r4, r6
  x = x1;                       /* Start x off at the first pixel */
 80007cc:	fa0f f980 	sxth.w	r9, r0
  y = y1;                       /* Start y off at the first pixel */
 80007d0:	fa0f fa83 	sxth.w	sl, r3
 80007d4:	f04f 0502 	mov.w	r5, #2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80007d8:	db0d      	blt.n	80007f6 <LCD_FillTriangle+0x6a>
    num = deltax / 2;
 80007da:	fb94 f5f5 	sdiv	r5, r4, r5
 80007de:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80007e0:	2700      	movs	r7, #0
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80007e2:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80007e4:	f04f 0b00 	mov.w	fp, #0
 80007e8:	fa0f f38b 	sxth.w	r3, fp
 80007ec:	429c      	cmp	r4, r3
 80007ee:	da0f      	bge.n	8000810 <LCD_FillTriangle+0x84>
}
 80007f0:	b007      	add	sp, #28
 80007f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80007f6:	4623      	mov	r3, r4
 80007f8:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80007fc:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8000800:	fb96 f5f5 	sdiv	r5, r6, r5
 8000804:	4634      	mov	r4, r6
 8000806:	b22d      	sxth	r5, r5
 8000808:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800080a:	f8cd 8000 	str.w	r8, [sp]
 800080e:	e7e9      	b.n	80007e4 <LCD_FillTriangle+0x58>
    LCD_DrawUniLine(x, y, x3, y3);
 8000810:	fa1f f389 	uxth.w	r3, r9
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	fa1f f38a 	uxth.w	r3, sl
 800081a:	9303      	str	r3, [sp, #12]
 800081c:	a802      	add	r0, sp, #8
 800081e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8000820:	4435      	add	r5, r6
    LCD_DrawUniLine(x, y, x3, y3);
 8000822:	f7ff ff4f 	bl	80006c4 <LCD_DrawUniLine>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8000826:	b2ab      	uxth	r3, r5
 8000828:	b21d      	sxth	r5, r3
    if (num >= den)             /* Check if numerator >= denominator */
 800082a:	42ac      	cmp	r4, r5
 800082c:	dc09      	bgt.n	8000842 <LCD_FillTriangle+0xb6>
      num -= den;               /* Calculate the new numerator value */
 800082e:	1b1d      	subs	r5, r3, r4
      x += xinc1;               /* Change the x as appropriate */
 8000830:	9b02      	ldr	r3, [sp, #8]
 8000832:	443b      	add	r3, r7
 8000834:	fa0f f983 	sxth.w	r9, r3
      y += yinc1;               /* Change the y as appropriate */
 8000838:	9b03      	ldr	r3, [sp, #12]
 800083a:	4443      	add	r3, r8
      num -= den;               /* Calculate the new numerator value */
 800083c:	b22d      	sxth	r5, r5
      y += yinc1;               /* Change the y as appropriate */
 800083e:	fa0f fa83 	sxth.w	sl, r3
    x += xinc2;                 /* Change the x as appropriate */
 8000842:	9b00      	ldr	r3, [sp, #0]
 8000844:	4499      	add	r9, r3
    y += yinc2;                 /* Change the y as appropriate */
 8000846:	9b01      	ldr	r3, [sp, #4]
 8000848:	449a      	add	sl, r3
    x += xinc2;                 /* Change the x as appropriate */
 800084a:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 800084e:	fa0f fa8a 	sxth.w	sl, sl
 8000852:	f10b 0b01 	add.w	fp, fp, #1
 8000856:	e7c7      	b.n	80007e8 <LCD_FillTriangle+0x5c>

08000858 <LCD_WriteCommand>:
{
 8000858:	b510      	push	{r4, lr}
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 800085a:	2200      	movs	r2, #0
{
 800085c:	4604      	mov	r4, r0
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <LCD_WriteCommand+0x44>)
 8000864:	f000 fe08 	bl	8001478 <GPIO_WriteBit>
 8000868:	f7ff fe26 	bl	80004b8 <LCD_ChipSelect.part.0>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 800086c:	4621      	mov	r1, r4
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LCD_WriteCommand+0x48>)
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8000870:	4c0b      	ldr	r4, [pc, #44]	; (80008a0 <LCD_WriteCommand+0x48>)
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8000872:	f001 f823 	bl	80018bc <SPI_I2S_SendData>
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8000876:	2102      	movs	r1, #2
 8000878:	4620      	mov	r0, r4
 800087a:	f001 f821 	bl	80018c0 <SPI_I2S_GetFlagStatus>
 800087e:	2800      	cmp	r0, #0
 8000880:	d0f9      	beq.n	8000876 <LCD_WriteCommand+0x1e>
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8000882:	4c07      	ldr	r4, [pc, #28]	; (80008a0 <LCD_WriteCommand+0x48>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	4620      	mov	r0, r4
 8000888:	f001 f81a 	bl	80018c0 <SPI_I2S_GetFlagStatus>
 800088c:	2800      	cmp	r0, #0
 800088e:	d1f9      	bne.n	8000884 <LCD_WriteCommand+0x2c>
  LCD_ChipSelect(ENABLE);
 8000890:	2001      	movs	r0, #1
}
 8000892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_ChipSelect(ENABLE);
 8000896:	f7ff be77 	b.w	8000588 <LCD_ChipSelect>
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40015000 	.word	0x40015000

080008a4 <LCD_WriteData>:
{
 80008a4:	b510      	push	{r4, lr}
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 80008a6:	2201      	movs	r2, #1
{
 80008a8:	4604      	mov	r4, r0
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <LCD_WriteData+0x44>)
 80008b0:	f000 fde2 	bl	8001478 <GPIO_WriteBit>
 80008b4:	f7ff fe00 	bl	80004b8 <LCD_ChipSelect.part.0>
  SPI_I2S_SendData(LCD_SPI, value);
 80008b8:	4621      	mov	r1, r4
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <LCD_WriteData+0x48>)
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80008bc:	4c0b      	ldr	r4, [pc, #44]	; (80008ec <LCD_WriteData+0x48>)
  SPI_I2S_SendData(LCD_SPI, value);
 80008be:	f000 fffd 	bl	80018bc <SPI_I2S_SendData>
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80008c2:	2102      	movs	r1, #2
 80008c4:	4620      	mov	r0, r4
 80008c6:	f000 fffb 	bl	80018c0 <SPI_I2S_GetFlagStatus>
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d0f9      	beq.n	80008c2 <LCD_WriteData+0x1e>
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80008ce:	4c07      	ldr	r4, [pc, #28]	; (80008ec <LCD_WriteData+0x48>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	4620      	mov	r0, r4
 80008d4:	f000 fff4 	bl	80018c0 <SPI_I2S_GetFlagStatus>
 80008d8:	2800      	cmp	r0, #0
 80008da:	d1f9      	bne.n	80008d0 <LCD_WriteData+0x2c>
  LCD_ChipSelect(ENABLE);
 80008dc:	2001      	movs	r0, #1
}
 80008de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_ChipSelect(ENABLE);
 80008e2:	f7ff be51 	b.w	8000588 <LCD_ChipSelect>
 80008e6:	bf00      	nop
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40015000 	.word	0x40015000

080008f0 <LCD_PowerOn>:
{
 80008f0:	b508      	push	{r3, lr}
  LCD_WriteCommand(0xCA);
 80008f2:	20ca      	movs	r0, #202	; 0xca
 80008f4:	f7ff ffb0 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 80008f8:	20c3      	movs	r0, #195	; 0xc3
 80008fa:	f7ff ffd3 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x08);
 80008fe:	2008      	movs	r0, #8
 8000900:	f7ff ffd0 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x50);
 8000904:	2050      	movs	r0, #80	; 0x50
 8000906:	f7ff ffcd 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 800090a:	20cf      	movs	r0, #207	; 0xcf
 800090c:	f7ff ffa4 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff ffc7 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8000916:	20c1      	movs	r0, #193	; 0xc1
 8000918:	f7ff ffc4 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x30);
 800091c:	2030      	movs	r0, #48	; 0x30
 800091e:	f7ff ffc1 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8000922:	20ed      	movs	r0, #237	; 0xed
 8000924:	f7ff ff98 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8000928:	2064      	movs	r0, #100	; 0x64
 800092a:	f7ff ffbb 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x03);
 800092e:	2003      	movs	r0, #3
 8000930:	f7ff ffb8 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x12);
 8000934:	2012      	movs	r0, #18
 8000936:	f7ff ffb5 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x81);
 800093a:	2081      	movs	r0, #129	; 0x81
 800093c:	f7ff ffb2 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 8000940:	20e8      	movs	r0, #232	; 0xe8
 8000942:	f7ff ff89 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8000946:	2085      	movs	r0, #133	; 0x85
 8000948:	f7ff ffac 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ffa9 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x78);
 8000952:	2078      	movs	r0, #120	; 0x78
 8000954:	f7ff ffa6 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8000958:	20cb      	movs	r0, #203	; 0xcb
 800095a:	f7ff ff7d 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 800095e:	2039      	movs	r0, #57	; 0x39
 8000960:	f7ff ffa0 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8000964:	202c      	movs	r0, #44	; 0x2c
 8000966:	f7ff ff9d 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff ff9a 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x34);
 8000970:	2034      	movs	r0, #52	; 0x34
 8000972:	f7ff ff97 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x02);
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff ff94 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 800097c:	20f7      	movs	r0, #247	; 0xf7
 800097e:	f7ff ff6b 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8000982:	2020      	movs	r0, #32
 8000984:	f7ff ff8e 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8000988:	20ea      	movs	r0, #234	; 0xea
 800098a:	f7ff ff65 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ff88 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff85 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 800099a:	20b1      	movs	r0, #177	; 0xb1
 800099c:	f7ff ff5c 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff7f 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80009a6:	201b      	movs	r0, #27
 80009a8:	f7ff ff7c 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80009ac:	20b6      	movs	r0, #182	; 0xb6
 80009ae:	f7ff ff53 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80009b2:	200a      	movs	r0, #10
 80009b4:	f7ff ff76 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0xA2);
 80009b8:	20a2      	movs	r0, #162	; 0xa2
 80009ba:	f7ff ff73 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 80009be:	20c0      	movs	r0, #192	; 0xc0
 80009c0:	f7ff ff4a 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80009c4:	2010      	movs	r0, #16
 80009c6:	f7ff ff6d 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 80009ca:	20c1      	movs	r0, #193	; 0xc1
 80009cc:	f7ff ff44 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80009d0:	2010      	movs	r0, #16
 80009d2:	f7ff ff67 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 80009d6:	20c5      	movs	r0, #197	; 0xc5
 80009d8:	f7ff ff3e 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 80009dc:	2045      	movs	r0, #69	; 0x45
 80009de:	f7ff ff61 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x15);
 80009e2:	2015      	movs	r0, #21
 80009e4:	f7ff ff5e 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 80009e8:	20c7      	movs	r0, #199	; 0xc7
 80009ea:	f7ff ff35 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 80009ee:	2090      	movs	r0, #144	; 0x90
 80009f0:	f7ff ff58 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 80009f4:	2036      	movs	r0, #54	; 0x36
 80009f6:	f7ff ff2f 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 80009fa:	20c8      	movs	r0, #200	; 0xc8
 80009fc:	f7ff ff52 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8000a00:	20f2      	movs	r0, #242	; 0xf2
 8000a02:	f7ff ff29 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ff4c 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 8000a0c:	20b0      	movs	r0, #176	; 0xb0
 8000a0e:	f7ff ff23 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8000a12:	20c2      	movs	r0, #194	; 0xc2
 8000a14:	f7ff ff46 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8000a18:	20b6      	movs	r0, #182	; 0xb6
 8000a1a:	f7ff ff1d 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f7ff ff40 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8000a24:	20a7      	movs	r0, #167	; 0xa7
 8000a26:	f7ff ff3d 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x27);
 8000a2a:	2027      	movs	r0, #39	; 0x27
 8000a2c:	f7ff ff3a 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x04);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff ff37 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8000a36:	202a      	movs	r0, #42	; 0x2a
 8000a38:	f7ff ff0e 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ff31 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff2e 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff2b 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8000a4e:	20ef      	movs	r0, #239	; 0xef
 8000a50:	f7ff ff28 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8000a54:	202b      	movs	r0, #43	; 0x2b
 8000a56:	f7ff feff 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff ff22 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff1f 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x01);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff ff1c 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8000a6c:	203f      	movs	r0, #63	; 0x3f
 8000a6e:	f7ff ff19 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8000a72:	20f6      	movs	r0, #246	; 0xf6
 8000a74:	f7ff fef0 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff ff13 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff ff10 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x06);
 8000a84:	2006      	movs	r0, #6
 8000a86:	f7ff ff0d 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_GRAM);
 8000a8a:	202c      	movs	r0, #44	; 0x2c
 8000a8c:	f7ff fee4 	bl	8000858 <LCD_WriteCommand>
  delay(200);
 8000a90:	f7ff fd18 	bl	80004c4 <delay.constprop.2>
  LCD_WriteCommand(LCD_GAMMA);
 8000a94:	2026      	movs	r0, #38	; 0x26
 8000a96:	f7ff fedf 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ff02 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_PGAMMA);
 8000aa0:	20e0      	movs	r0, #224	; 0xe0
 8000aa2:	f7ff fed9 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff fefc 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x29);
 8000aac:	2029      	movs	r0, #41	; 0x29
 8000aae:	f7ff fef9 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x24);
 8000ab2:	2024      	movs	r0, #36	; 0x24
 8000ab4:	f7ff fef6 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f7ff fef3 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8000abe:	200e      	movs	r0, #14
 8000ac0:	f7ff fef0 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x09);
 8000ac4:	2009      	movs	r0, #9
 8000ac6:	f7ff feed 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8000aca:	204e      	movs	r0, #78	; 0x4e
 8000acc:	f7ff feea 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x78);
 8000ad0:	2078      	movs	r0, #120	; 0x78
 8000ad2:	f7ff fee7 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8000ad6:	203c      	movs	r0, #60	; 0x3c
 8000ad8:	f7ff fee4 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x09);
 8000adc:	2009      	movs	r0, #9
 8000ade:	f7ff fee1 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x13);
 8000ae2:	2013      	movs	r0, #19
 8000ae4:	f7ff fede 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x05);
 8000ae8:	2005      	movs	r0, #5
 8000aea:	f7ff fedb 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x17);
 8000aee:	2017      	movs	r0, #23
 8000af0:	f7ff fed8 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x11);
 8000af4:	2011      	movs	r0, #17
 8000af6:	f7ff fed5 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x00);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fed2 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8000b00:	20e1      	movs	r0, #225	; 0xe1
 8000b02:	f7ff fea9 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fecc 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x16);
 8000b0c:	2016      	movs	r0, #22
 8000b0e:	f7ff fec9 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8000b12:	201b      	movs	r0, #27
 8000b14:	f7ff fec6 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x04);
 8000b18:	2004      	movs	r0, #4
 8000b1a:	f7ff fec3 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x11);
 8000b1e:	2011      	movs	r0, #17
 8000b20:	f7ff fec0 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x07);
 8000b24:	2007      	movs	r0, #7
 8000b26:	f7ff febd 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x31);
 8000b2a:	2031      	movs	r0, #49	; 0x31
 8000b2c:	f7ff feba 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x33);
 8000b30:	2033      	movs	r0, #51	; 0x33
 8000b32:	f7ff feb7 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x42);
 8000b36:	2042      	movs	r0, #66	; 0x42
 8000b38:	f7ff feb4 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x05);
 8000b3c:	2005      	movs	r0, #5
 8000b3e:	f7ff feb1 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8000b42:	200c      	movs	r0, #12
 8000b44:	f7ff feae 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f7ff feab 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x28);
 8000b4e:	2028      	movs	r0, #40	; 0x28
 8000b50:	f7ff fea8 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8000b54:	202f      	movs	r0, #47	; 0x2f
 8000b56:	f7ff fea5 	bl	80008a4 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff fea2 	bl	80008a4 <LCD_WriteData>
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8000b60:	2011      	movs	r0, #17
 8000b62:	f7ff fe79 	bl	8000858 <LCD_WriteCommand>
  delay(200);
 8000b66:	f7ff fcad 	bl	80004c4 <delay.constprop.2>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8000b6a:	2029      	movs	r0, #41	; 0x29
 8000b6c:	f7ff fe74 	bl	8000858 <LCD_WriteCommand>
  LCD_WriteCommand(LCD_GRAM);
 8000b70:	202c      	movs	r0, #44	; 0x2c
 }
 8000b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_WriteCommand(LCD_GRAM);
 8000b76:	f7ff be6f 	b.w	8000858 <LCD_WriteCommand>
	...

08000b7c <LCD_CtrlLinesConfig>:
{
 8000b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000b7e:	4c12      	ldr	r4, [pc, #72]	; (8000bc8 <LCD_CtrlLinesConfig+0x4c>)
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 8000b80:	2101      	movs	r1, #1
 8000b82:	200c      	movs	r0, #12
 8000b84:	f000 fdb4 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b88:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8000b8a:	2504      	movs	r5, #4
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b8c:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000b90:	2601      	movs	r6, #1
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b92:	2300      	movs	r3, #0
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000b94:	4669      	mov	r1, sp
 8000b96:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b98:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b9c:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8000ba0:	9500      	str	r5, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ba2:	f88d 6004 	strb.w	r6, [sp, #4]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000ba6:	f000 fc15 	bl	80013d4 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000bae:	4669      	mov	r1, sp
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <LCD_CtrlLinesConfig+0x50>)
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8000bb2:	9300      	str	r3, [sp, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000bb4:	f000 fc0e 	bl	80013d4 <GPIO_Init>
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8000bb8:	4632      	mov	r2, r6
 8000bba:	4629      	mov	r1, r5
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f000 fc5b 	bl	8001478 <GPIO_WriteBit>
}
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00

08000bd0 <LCD_SPIConfig>:
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8000bd2:	2101      	movs	r1, #1
{
 8000bd4:	b088      	sub	sp, #32
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	f000 fd8a 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000be2:	f000 fd9d 	bl	8001720 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8000be6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000be8:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8000bea:	9301      	str	r3, [sp, #4]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000bec:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000bee:	2302      	movs	r3, #2
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000bf0:	4828      	ldr	r0, [pc, #160]	; (8000c94 <LCD_SPIConfig+0xc4>)
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000bf2:	f88d 200a 	strb.w	r2, [sp, #10]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8000bf6:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000bf8:	f88d 3008 	strb.w	r3, [sp, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000bfc:	f88d 300b 	strb.w	r3, [sp, #11]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8000c00:	f88d 5009 	strb.w	r5, [sp, #9]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000c04:	f000 fbe6 	bl	80013d4 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8000c0c:	a901      	add	r1, sp, #4
 8000c0e:	4821      	ldr	r0, [pc, #132]	; (8000c94 <LCD_SPIConfig+0xc4>)
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8000c10:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8000c12:	f44f 7600 	mov.w	r6, #512	; 0x200
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8000c16:	f000 fbdd 	bl	80013d4 <GPIO_Init>
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000c1a:	a901      	add	r1, sp, #4
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <LCD_SPIConfig+0xc4>)
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8000c1e:	9601      	str	r6, [sp, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000c20:	f000 fbd8 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8000c24:	2205      	movs	r2, #5
 8000c26:	2107      	movs	r1, #7
 8000c28:	481a      	ldr	r0, [pc, #104]	; (8000c94 <LCD_SPIConfig+0xc4>)
  SPI_I2S_DeInit(LCD_SPI);
 8000c2a:	4c1b      	ldr	r4, [pc, #108]	; (8000c98 <LCD_SPIConfig+0xc8>)
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8000c2c:	f000 fc29 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8000c30:	2205      	movs	r2, #5
 8000c32:	2108      	movs	r1, #8
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <LCD_SPIConfig+0xc4>)
 8000c36:	f000 fc24 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	2109      	movs	r1, #9
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <LCD_SPIConfig+0xc4>)
 8000c40:	f000 fc1f 	bl	8001482 <GPIO_PinAFConfig>
  SPI_I2S_DeInit(LCD_SPI);
 8000c44:	4620      	mov	r0, r4
 8000c46:	f000 fdaf 	bl	80017a8 <SPI_I2S_DeInit>
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 8000c4a:	8823      	ldrh	r3, [r4, #0]
 8000c4c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000c50:	d11d      	bne.n	8000c8e <LCD_SPIConfig+0xbe>
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000c52:	f44f 7282 	mov.w	r2, #260	; 0x104
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c56:	f8ad 300c 	strh.w	r3, [sp, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000c5a:	f8ad 200e 	strh.w	r2, [sp, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000c5e:	f8ad 3010 	strh.w	r3, [sp, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000c62:	f8ad 3012 	strh.w	r3, [sp, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000c66:	f8ad 3014 	strh.w	r3, [sp, #20]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8000c6a:	2218      	movs	r2, #24
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000c6c:	f8ad 301a 	strh.w	r3, [sp, #26]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8000c70:	a903      	add	r1, sp, #12
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000c72:	2307      	movs	r3, #7
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8000c74:	4620      	mov	r0, r4
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000c76:	f8ad 6016 	strh.w	r6, [sp, #22]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8000c7a:	f8ad 2018 	strh.w	r2, [sp, #24]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000c7e:	f8ad 301c 	strh.w	r3, [sp, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8000c82:	f000 fded 	bl	8001860 <SPI_Init>
    SPI_Cmd(LCD_SPI, ENABLE);
 8000c86:	4629      	mov	r1, r5
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f000 fe08 	bl	800189e <SPI_Cmd>
}
 8000c8e:	b008      	add	sp, #32
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
 8000c92:	bf00      	nop
 8000c94:	40021400 	.word	0x40021400
 8000c98:	40015000 	.word	0x40015000

08000c9c <LCD_Init>:
{ 
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
  LCD_CtrlLinesConfig();
 8000ca0:	f7ff ff6c 	bl	8000b7c <LCD_CtrlLinesConfig>
 8000ca4:	f7ff fc08 	bl	80004b8 <LCD_ChipSelect.part.0>
  LCD_ChipSelect(ENABLE);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fc6d 	bl	8000588 <LCD_ChipSelect>
  LCD_SPIConfig(); 
 8000cae:	f7ff ff8f 	bl	8000bd0 <LCD_SPIConfig>
  LCD_PowerOn();
 8000cb2:	f7ff fe1d 	bl	80008f0 <LCD_PowerOn>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cbc:	f000 fd30 	bl	8001720 <RCC_APB2PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000cc6:	f000 fd13 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8000cca:	2101      	movs	r1, #1
 8000ccc:	206f      	movs	r0, #111	; 0x6f
 8000cce:	f000 fd0f 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8000cd2:	220e      	movs	r2, #14
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	4869      	ldr	r0, [pc, #420]	; (8000e7c <LCD_Init+0x1e0>)
 8000cd8:	f000 fbd3 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8000cdc:	220e      	movs	r2, #14
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4866      	ldr	r0, [pc, #408]	; (8000e7c <LCD_Init+0x1e0>)
 8000ce2:	f000 fbce 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8000ce6:	220e      	movs	r2, #14
 8000ce8:	2106      	movs	r1, #6
 8000cea:	4864      	ldr	r0, [pc, #400]	; (8000e7c <LCD_Init+0x1e0>)
 8000cec:	f000 fbc9 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8000cf0:	220e      	movs	r2, #14
 8000cf2:	210b      	movs	r1, #11
 8000cf4:	4861      	ldr	r0, [pc, #388]	; (8000e7c <LCD_Init+0x1e0>)
 8000cf6:	f000 fbc4 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8000cfa:	220e      	movs	r2, #14
 8000cfc:	210c      	movs	r1, #12
 8000cfe:	485f      	ldr	r0, [pc, #380]	; (8000e7c <LCD_Init+0x1e0>)
 8000d00:	f000 fbbf 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8000d04:	f641 0358 	movw	r3, #6232	; 0x1858
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000d08:	2400      	movs	r4, #0
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8000d0a:	9301      	str	r3, [sp, #4]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d0e:	2302      	movs	r3, #2
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	485a      	ldr	r0, [pc, #360]	; (8000e7c <LCD_Init+0x1e0>)
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d12:	f88d 3009 	strb.w	r3, [sp, #9]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000d16:	f88d 3008 	strb.w	r3, [sp, #8]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000d1a:	f88d 400a 	strb.w	r4, [sp, #10]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d1e:	f88d 400b 	strb.w	r4, [sp, #11]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f000 fb57 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8000d26:	2209      	movs	r2, #9
 8000d28:	4621      	mov	r1, r4
 8000d2a:	4855      	ldr	r0, [pc, #340]	; (8000e80 <LCD_Init+0x1e4>)
 8000d2c:	f000 fba9 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8000d30:	2209      	movs	r2, #9
 8000d32:	2101      	movs	r1, #1
 8000d34:	4852      	ldr	r0, [pc, #328]	; (8000e80 <LCD_Init+0x1e4>)
 8000d36:	f000 fba4 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8000d3a:	220e      	movs	r2, #14
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4850      	ldr	r0, [pc, #320]	; (8000e80 <LCD_Init+0x1e4>)
 8000d40:	f000 fb9f 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8000d44:	220e      	movs	r2, #14
 8000d46:	2109      	movs	r1, #9
 8000d48:	484d      	ldr	r0, [pc, #308]	; (8000e80 <LCD_Init+0x1e4>)
 8000d4a:	f000 fb9a 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8000d4e:	220e      	movs	r2, #14
 8000d50:	210a      	movs	r1, #10
 8000d52:	484b      	ldr	r0, [pc, #300]	; (8000e80 <LCD_Init+0x1e4>)
 8000d54:	f000 fb95 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8000d58:	220e      	movs	r2, #14
 8000d5a:	210b      	movs	r1, #11
 8000d5c:	4848      	ldr	r0, [pc, #288]	; (8000e80 <LCD_Init+0x1e4>)
 8000d5e:	f000 fb90 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8000d62:	f640 7303 	movw	r3, #3843	; 0xf03
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	a901      	add	r1, sp, #4
 8000d68:	4845      	ldr	r0, [pc, #276]	; (8000e80 <LCD_Init+0x1e4>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8000d6a:	9301      	str	r3, [sp, #4]
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f000 fb32 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8000d70:	220e      	movs	r2, #14
 8000d72:	2106      	movs	r1, #6
 8000d74:	4843      	ldr	r0, [pc, #268]	; (8000e84 <LCD_Init+0x1e8>)
 8000d76:	f000 fb84 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8000d7a:	220e      	movs	r2, #14
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	4841      	ldr	r0, [pc, #260]	; (8000e84 <LCD_Init+0x1e8>)
 8000d80:	f000 fb7f 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8000d84:	220e      	movs	r2, #14
 8000d86:	210a      	movs	r1, #10
 8000d88:	483e      	ldr	r0, [pc, #248]	; (8000e84 <LCD_Init+0x1e8>)
 8000d8a:	f000 fb7a 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8000d8e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	a901      	add	r1, sp, #4
 8000d94:	483b      	ldr	r0, [pc, #236]	; (8000e84 <LCD_Init+0x1e8>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8000d96:	9301      	str	r3, [sp, #4]
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f000 fb1c 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8000d9c:	220e      	movs	r2, #14
 8000d9e:	2103      	movs	r1, #3
 8000da0:	4839      	ldr	r0, [pc, #228]	; (8000e88 <LCD_Init+0x1ec>)
 8000da2:	f000 fb6e 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8000da6:	220e      	movs	r2, #14
 8000da8:	2106      	movs	r1, #6
 8000daa:	4837      	ldr	r0, [pc, #220]	; (8000e88 <LCD_Init+0x1ec>)
 8000dac:	f000 fb69 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8000db0:	2348      	movs	r3, #72	; 0x48
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	a901      	add	r1, sp, #4
 8000db4:	4834      	ldr	r0, [pc, #208]	; (8000e88 <LCD_Init+0x1ec>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8000db6:	9301      	str	r3, [sp, #4]
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f000 fb0c 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8000dbc:	220e      	movs	r2, #14
 8000dbe:	210a      	movs	r1, #10
 8000dc0:	4832      	ldr	r0, [pc, #200]	; (8000e8c <LCD_Init+0x1f0>)
 8000dc2:	f000 fb5e 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8000dca:	a901      	add	r1, sp, #4
 8000dcc:	482f      	ldr	r0, [pc, #188]	; (8000e8c <LCD_Init+0x1f0>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8000dce:	9301      	str	r3, [sp, #4]
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8000dd0:	f000 fb00 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8000dd4:	220e      	movs	r2, #14
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <LCD_Init+0x1f4>)
 8000dda:	f000 fb52 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8000dde:	220e      	movs	r2, #14
 8000de0:	2107      	movs	r1, #7
 8000de2:	482b      	ldr	r0, [pc, #172]	; (8000e90 <LCD_Init+0x1f4>)
 8000de4:	f000 fb4d 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8000de8:	2209      	movs	r2, #9
 8000dea:	210a      	movs	r1, #10
 8000dec:	4828      	ldr	r0, [pc, #160]	; (8000e90 <LCD_Init+0x1f4>)
 8000dee:	f000 fb48 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8000df2:	220e      	movs	r2, #14
 8000df4:	210b      	movs	r1, #11
 8000df6:	4826      	ldr	r0, [pc, #152]	; (8000e90 <LCD_Init+0x1f4>)
 8000df8:	f000 fb43 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	210c      	movs	r1, #12
 8000e00:	4823      	ldr	r0, [pc, #140]	; (8000e90 <LCD_Init+0x1f4>)
 8000e02:	f000 fb3e 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8000e06:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0a:	a901      	add	r1, sp, #4
 8000e0c:	4820      	ldr	r0, [pc, #128]	; (8000e90 <LCD_Init+0x1f4>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8000e0e:	9301      	str	r3, [sp, #4]
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e10:	f000 fae0 	bl	80013d4 <GPIO_Init>
  SDRAM_Init();
 8000e14:	f000 f9ae 	bl	8001174 <SDRAM_Init>
  RCC_PLLSAIConfig(192, 7, 4);
 8000e18:	2204      	movs	r2, #4
 8000e1a:	2107      	movs	r1, #7
 8000e1c:	20c0      	movs	r0, #192	; 0xc0
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8000e1e:	9401      	str	r4, [sp, #4]
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8000e20:	9402      	str	r4, [sp, #8]
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8000e22:	9403      	str	r4, [sp, #12]
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8000e24:	9404      	str	r4, [sp, #16]
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8000e26:	940d      	str	r4, [sp, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8000e28:	940e      	str	r4, [sp, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8000e2a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_PLLSAIConfig(192, 7, 4);
 8000e2c:	f000 fbfe 	bl	800162c <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8000e30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e34:	f000 fc50 	bl	80016d8 <RCC_LTDCCLKDivConfig>
  RCC_PLLSAICmd(ENABLE);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fc03 	bl	8001644 <RCC_PLLSAICmd>
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8000e3e:	203d      	movs	r0, #61	; 0x3d
 8000e40:	f000 fc9e 	bl	8001780 <RCC_GetFlagStatus>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d0fa      	beq.n	8000e3e <LCD_Init+0x1a2>
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8000e48:	2309      	movs	r3, #9
 8000e4a:	9305      	str	r3, [sp, #20]
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9306      	str	r3, [sp, #24]
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8000e50:	231d      	movs	r3, #29
 8000e52:	9307      	str	r3, [sp, #28]
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8000e54:	2303      	movs	r3, #3
 8000e56:	9308      	str	r3, [sp, #32]
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8000e58:	f240 130d 	movw	r3, #269	; 0x10d
 8000e5c:	9309      	str	r3, [sp, #36]	; 0x24
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8000e5e:	f240 1343 	movw	r3, #323	; 0x143
 8000e62:	930a      	str	r3, [sp, #40]	; 0x28
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8000e64:	f240 1317 	movw	r3, #279	; 0x117
 8000e68:	930b      	str	r3, [sp, #44]	; 0x2c
  LTDC_Init(&LTDC_InitStruct);
 8000e6a:	a801      	add	r0, sp, #4
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8000e6c:	f240 1347 	movw	r3, #327	; 0x147
 8000e70:	930c      	str	r3, [sp, #48]	; 0x30
  LTDC_Init(&LTDC_InitStruct);
 8000e72:	f000 fb19 	bl	80014a8 <LTDC_Init>
}  
 8000e76:	b010      	add	sp, #64	; 0x40
 8000e78:	bd10      	pop	{r4, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40021800 	.word	0x40021800

08000e94 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 8000e94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8000e98:	4c82      	ldr	r4, [pc, #520]	; (80010a4 <SDRAM_GPIOConfig+0x210>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	207e      	movs	r0, #126	; 0x7e
 8000e9e:	f000 fc27 	bl	80016f0 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ea2:	2600      	movs	r6, #0
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8000ea4:	f04f 0802 	mov.w	r8, #2
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	220c      	movs	r2, #12
 8000eac:	2105      	movs	r1, #5
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 8000eae:	ad02      	add	r5, sp, #8
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8000eb0:	f88d 8004 	strb.w	r8, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000eb4:	f88d 8005 	strb.w	r8, [sp, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000eb8:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000ebc:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8000ec0:	f000 fadf 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	2106      	movs	r1, #6
 8000eca:	f000 fada 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 8000ece:	2360      	movs	r3, #96	; 0x60
 8000ed0:	f845 3d08 	str.w	r3, [r5, #-8]!

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8000ed8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000edc:	f000 fa7a 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f000 facc 	bl	8001482 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8000eea:	2701      	movs	r7, #1

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000eec:	4629      	mov	r1, r5
 8000eee:	4620      	mov	r0, r4
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8000ef0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8000ef4:	9700      	str	r7, [sp, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000ef6:	f000 fa6d 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8000efa:	4631      	mov	r1, r6
 8000efc:	4620      	mov	r0, r4
 8000efe:	220c      	movs	r2, #12
 8000f00:	f000 fabf 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8000f04:	4639      	mov	r1, r7
 8000f06:	4620      	mov	r0, r4
 8000f08:	220c      	movs	r2, #12
 8000f0a:	f000 faba 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	220c      	movs	r2, #12
 8000f12:	2108      	movs	r1, #8
 8000f14:	f000 fab5 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8000f18:	4620      	mov	r0, r4
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	2109      	movs	r1, #9
 8000f1e:	f000 fab0 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 8000f22:	4620      	mov	r0, r4
 8000f24:	220c      	movs	r2, #12
 8000f26:	210a      	movs	r1, #10
 8000f28:	f000 faab 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	220c      	movs	r2, #12
 8000f30:	210e      	movs	r1, #14
 8000f32:	f000 faa6 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8000f36:	220c      	movs	r2, #12
 8000f38:	4620      	mov	r0, r4
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f000 faa1 	bl	8001482 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 8000f40:	f24c 7303 	movw	r3, #50947	; 0xc703
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f44:	4629      	mov	r1, r5
 8000f46:	4620      	mov	r0, r4

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 8000f48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 8000f4c:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f4e:	f000 fa41 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 8000f52:	4631      	mov	r1, r6
 8000f54:	4620      	mov	r0, r4
 8000f56:	220c      	movs	r2, #12
 8000f58:	f000 fa93 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	4620      	mov	r0, r4
 8000f60:	220c      	movs	r2, #12
 8000f62:	f000 fa8e 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 8000f66:	4620      	mov	r0, r4
 8000f68:	220c      	movs	r2, #12
 8000f6a:	2107      	movs	r1, #7
 8000f6c:	f000 fa89 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8000f70:	4620      	mov	r0, r4
 8000f72:	220c      	movs	r2, #12
 8000f74:	2108      	movs	r1, #8
 8000f76:	f000 fa84 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	2109      	movs	r1, #9
 8000f80:	f000 fa7f 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 8000f84:	4620      	mov	r0, r4
 8000f86:	220c      	movs	r2, #12
 8000f88:	210a      	movs	r1, #10
 8000f8a:	f000 fa7a 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8000f8e:	4620      	mov	r0, r4
 8000f90:	220c      	movs	r2, #12
 8000f92:	210b      	movs	r1, #11
 8000f94:	f000 fa75 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8000f98:	220c      	movs	r2, #12
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f000 fa70 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	210d      	movs	r1, #13
 8000fa8:	f000 fa6b 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8000fac:	4620      	mov	r0, r4
 8000fae:	220c      	movs	r2, #12
 8000fb0:	210e      	movs	r1, #14
 8000fb2:	f000 fa66 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	4620      	mov	r0, r4
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f000 fa61 	bl	8001482 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8000fc0:	f64f 7383 	movw	r3, #65411	; 0xff83
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4620      	mov	r0, r4

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8000fc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8000fcc:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000fce:	f000 fa01 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8000fd2:	4631      	mov	r1, r6
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	f000 fa53 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8000fdc:	4639      	mov	r1, r7
 8000fde:	4620      	mov	r0, r4
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	f000 fa4e 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 8000fe6:	4641      	mov	r1, r8
 8000fe8:	4620      	mov	r0, r4
 8000fea:	220c      	movs	r2, #12
 8000fec:	f000 fa49 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	f000 fa44 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	2104      	movs	r1, #4
 8001000:	f000 fa3f 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 8001004:	4620      	mov	r0, r4
 8001006:	220c      	movs	r2, #12
 8001008:	2105      	movs	r1, #5
 800100a:	f000 fa3a 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 800100e:	4620      	mov	r0, r4
 8001010:	220c      	movs	r2, #12
 8001012:	210b      	movs	r1, #11
 8001014:	f000 fa35 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 8001018:	220c      	movs	r2, #12
 800101a:	4611      	mov	r1, r2
 800101c:	4620      	mov	r0, r4
 800101e:	f000 fa30 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8001022:	4620      	mov	r0, r4
 8001024:	220c      	movs	r2, #12
 8001026:	210d      	movs	r1, #13
 8001028:	f000 fa2b 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 800102c:	4620      	mov	r0, r4
 800102e:	220c      	movs	r2, #12
 8001030:	210e      	movs	r1, #14
 8001032:	f000 fa26 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 8001036:	220c      	movs	r2, #12
 8001038:	4620      	mov	r0, r4
 800103a:	210f      	movs	r1, #15
 800103c:	f000 fa21 	bl	8001482 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 8001040:	f64f 033f 	movw	r3, #63551	; 0xf83f
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001044:	4629      	mov	r1, r5
 8001046:	4620      	mov	r0, r4

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 8001048:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 800104c:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 800104e:	f000 f9c1 	bl	80013d4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 8001052:	4631      	mov	r1, r6
 8001054:	4620      	mov	r0, r4
 8001056:	220c      	movs	r2, #12
 8001058:	f000 fa13 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 800105c:	4639      	mov	r1, r7
 800105e:	4620      	mov	r0, r4
 8001060:	220c      	movs	r2, #12
 8001062:	f000 fa0e 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 8001066:	4620      	mov	r0, r4
 8001068:	220c      	movs	r2, #12
 800106a:	2104      	movs	r1, #4
 800106c:	f000 fa09 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8001070:	4620      	mov	r0, r4
 8001072:	220c      	movs	r2, #12
 8001074:	2105      	movs	r1, #5
 8001076:	f000 fa04 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 800107a:	4620      	mov	r0, r4
 800107c:	220c      	movs	r2, #12
 800107e:	2108      	movs	r1, #8
 8001080:	f000 f9ff 	bl	8001482 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8001084:	220c      	movs	r2, #12
 8001086:	4620      	mov	r0, r4
 8001088:	210f      	movs	r1, #15
 800108a:	f000 f9fa 	bl	8001482 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 800108e:	f248 1333 	movw	r3, #33075	; 0x8133
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8001092:	4629      	mov	r1, r5
 8001094:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8001096:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8001098:	f000 f99c 	bl	80013d4 <GPIO_Init>
}
 800109c:	b002      	add	sp, #8
 800109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a2:	bf00      	nop
 80010a4:	40020400 	.word	0x40020400

080010a8 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 80010a8:	b510      	push	{r4, lr}
 80010aa:	b086      	sub	sp, #24
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 80010ac:	2301      	movs	r3, #1
 80010ae:	9302      	str	r3, [sp, #8]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80010b0:	2208      	movs	r2, #8
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80010b2:	9304      	str	r3, [sp, #16]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80010b4:	2300      	movs	r3, #0
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80010b6:	9203      	str	r2, [sp, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80010b8:	9305      	str	r3, [sp, #20]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80010ba:	2120      	movs	r1, #32
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 f969 	bl	8001394 <FMC_GetFlagStatus>
 80010c2:	4604      	mov	r4, r0
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d1f8      	bne.n	80010ba <SDRAM_InitSequence+0x12>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 80010c8:	a802      	add	r0, sp, #8
 80010ca:	f000 f94b 	bl	8001364 <FMC_SDRAMCmdConfig>
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
  __IO uint32_t index = 0; 
  for(index = (100000 * nCount); index != 0; index--)
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <SDRAM_InitSequence+0xc8>)
  __IO uint32_t index = 0; 
 80010d0:	9401      	str	r4, [sp, #4]
  for(index = (100000 * nCount); index != 0; index--)
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	9b01      	ldr	r3, [sp, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d147      	bne.n	800116a <SDRAM_InitSequence+0xc2>
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 80010da:	2202      	movs	r2, #2
 80010dc:	9202      	str	r2, [sp, #8]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80010de:	2208      	movs	r2, #8
 80010e0:	9203      	str	r2, [sp, #12]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80010e2:	2201      	movs	r2, #1
 80010e4:	9204      	str	r2, [sp, #16]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80010e6:	9305      	str	r3, [sp, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80010e8:	2120      	movs	r1, #32
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f952 	bl	8001394 <FMC_GetFlagStatus>
 80010f0:	4604      	mov	r4, r0
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d1f8      	bne.n	80010e8 <SDRAM_InitSequence+0x40>
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80010f6:	a802      	add	r0, sp, #8
 80010f8:	f000 f934 	bl	8001364 <FMC_SDRAMCmdConfig>
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 80010fc:	2303      	movs	r3, #3
 80010fe:	9302      	str	r3, [sp, #8]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8001100:	2308      	movs	r3, #8
 8001102:	9303      	str	r3, [sp, #12]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8001104:	2304      	movs	r3, #4
 8001106:	9304      	str	r3, [sp, #16]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8001108:	9405      	str	r4, [sp, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800110a:	2120      	movs	r1, #32
 800110c:	2001      	movs	r0, #1
 800110e:	f000 f941 	bl	8001394 <FMC_GetFlagStatus>
 8001112:	2800      	cmp	r0, #0
 8001114:	d1f9      	bne.n	800110a <SDRAM_InitSequence+0x62>
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8001116:	a802      	add	r0, sp, #8
 8001118:	f000 f924 	bl	8001364 <FMC_SDRAMCmdConfig>
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800111c:	2120      	movs	r1, #32
 800111e:	2001      	movs	r0, #1
 8001120:	f000 f938 	bl	8001394 <FMC_GetFlagStatus>
 8001124:	2800      	cmp	r0, #0
 8001126:	d1f9      	bne.n	800111c <SDRAM_InitSequence+0x74>
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8001128:	a802      	add	r0, sp, #8
 800112a:	f000 f91b 	bl	8001364 <FMC_SDRAMCmdConfig>
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 800112e:	2304      	movs	r3, #4
 8001130:	9302      	str	r3, [sp, #8]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8001132:	2308      	movs	r3, #8
 8001134:	9303      	str	r3, [sp, #12]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	9304      	str	r3, [sp, #16]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 800113a:	f240 2331 	movw	r3, #561	; 0x231
 800113e:	9305      	str	r3, [sp, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8001140:	2120      	movs	r1, #32
 8001142:	2001      	movs	r0, #1
 8001144:	f000 f926 	bl	8001394 <FMC_GetFlagStatus>
 8001148:	2800      	cmp	r0, #0
 800114a:	d1f9      	bne.n	8001140 <SDRAM_InitSequence+0x98>
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 800114c:	a802      	add	r0, sp, #8
 800114e:	f000 f909 	bl	8001364 <FMC_SDRAMCmdConfig>
  FMC_SetRefreshCount(1386);
 8001152:	f240 506a 	movw	r0, #1386	; 0x56a
 8001156:	f000 f915 	bl	8001384 <FMC_SetRefreshCount>
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800115a:	2120      	movs	r1, #32
 800115c:	2001      	movs	r0, #1
 800115e:	f000 f919 	bl	8001394 <FMC_GetFlagStatus>
 8001162:	2800      	cmp	r0, #0
 8001164:	d1f9      	bne.n	800115a <SDRAM_InitSequence+0xb2>
}
 8001166:	b006      	add	sp, #24
 8001168:	bd10      	pop	{r4, pc}
  for(index = (100000 * nCount); index != 0; index--)
 800116a:	9b01      	ldr	r3, [sp, #4]
 800116c:	3b01      	subs	r3, #1
 800116e:	e7b0      	b.n	80010d2 <SDRAM_InitSequence+0x2a>
 8001170:	000f4240 	.word	0x000f4240

08001174 <SDRAM_Init>:
{
 8001174:	b500      	push	{lr}
 8001176:	b093      	sub	sp, #76	; 0x4c
  SDRAM_GPIOConfig();
 8001178:	f7ff fe8c 	bl	8000e94 <SDRAM_GPIOConfig>
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 800117c:	2101      	movs	r1, #1
 800117e:	4608      	mov	r0, r1
 8001180:	f000 fac2 	bl	8001708 <RCC_AHB3PeriphClockCmd>
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 8001184:	2204      	movs	r2, #4
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 8001186:	2302      	movs	r3, #2
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 8001188:	9202      	str	r2, [sp, #8]
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 800118a:	9209      	str	r2, [sp, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 800118c:	2210      	movs	r2, #16
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 800118e:	9300      	str	r3, [sp, #0]
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 8001190:	9304      	str	r3, [sp, #16]
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 8001192:	9305      	str	r3, [sp, #20]
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 8001194:	9306      	str	r3, [sp, #24]
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8001196:	920a      	str	r2, [sp, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8001198:	2301      	movs	r3, #1
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 800119a:	2240      	movs	r2, #64	; 0x40
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 800119c:	9307      	str	r3, [sp, #28]
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 800119e:	920b      	str	r2, [sp, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80011a0:	2300      	movs	r3, #0
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 80011a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80011a6:	2107      	movs	r1, #7
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80011a8:	9308      	str	r3, [sp, #32]
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 80011aa:	920c      	str	r2, [sp, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 80011ac:	930d      	str	r3, [sp, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 80011ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 80011b2:	930f      	str	r3, [sp, #60]	; 0x3c
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 80011b4:	a807      	add	r0, sp, #28
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80011b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80011ba:	9101      	str	r1, [sp, #4]
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 80011bc:	9103      	str	r1, [sp, #12]
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 80011be:	920e      	str	r2, [sp, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80011c0:	9310      	str	r3, [sp, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 80011c2:	f8cd d044 	str.w	sp, [sp, #68]	; 0x44
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 80011c6:	f000 f879 	bl	80012bc <FMC_SDRAMInit>
  SDRAM_InitSequence(); 
 80011ca:	f7ff ff6d 	bl	80010a8 <SDRAM_InitSequence>
}
 80011ce:	b013      	add	sp, #76	; 0x4c
 80011d0:	f85d fb04 	ldr.w	pc, [sp], #4

080011d4 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 80011d4:	b508      	push	{r3, lr}
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 80011d6:	2101      	movs	r1, #1
 80011d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80011dc:	f000 faac 	bl	8001738 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 80011e0:	2100      	movs	r1, #0
 80011e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
}
 80011e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 80011ea:	f000 baa5 	b.w	8001738 <RCC_AHB1PeriphResetCmd>
	...

080011f0 <DMA2D_Init>:
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <DMA2D_Init+0xa4>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 80011f8:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
  DMA2D->CR &= (uint32_t)CR_MASK;
 80011fe:	601a      	str	r2, [r3, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	6801      	ldr	r1, [r0, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8001208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120a:	f022 0207 	bic.w	r2, r2, #7
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 8001210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001212:	6844      	ldr	r4, [r0, #4]
 8001214:	4322      	orrs	r2, r4
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
 8001218:	68c1      	ldr	r1, [r0, #12]
 800121a:	6902      	ldr	r2, [r0, #16]

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800121c:	bb1c      	cbnz	r4, 8001266 <DMA2D_Init+0x76>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800121e:	6944      	ldr	r4, [r0, #20]
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8001220:	0209      	lsls	r1, r1, #8
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8001222:	0412      	lsls	r2, r2, #16
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8001224:	0624      	lsls	r4, r4, #24
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <DMA2D_Init+0xa4>)
 8001228:	6886      	ldr	r6, [r0, #8]
 800122a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800122c:	4335      	orrs	r5, r6
 800122e:	4329      	orrs	r1, r5
 8001230:	430a      	orrs	r2, r1
 8001232:	4314      	orrs	r4, r2
 8001234:	639c      	str	r4, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 8001236:	6982      	ldr	r2, [r0, #24]
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 800123a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001240:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 8001246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001248:	69c1      	ldr	r1, [r0, #28]
 800124a:	430a      	orrs	r2, r1
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800124e:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 8001250:	6a44      	ldr	r4, [r0, #36]	; 0x24
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 8001252:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8001256:	6459      	str	r1, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8001258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800125a:	6a01      	ldr	r1, [r0, #32]
 800125c:	430a      	orrs	r2, r1
 800125e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
 8001264:	bd70      	pop	{r4, r5, r6, pc}
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8001266:	2c01      	cmp	r4, #1
 8001268:	d103      	bne.n	8001272 <DMA2D_Init+0x82>
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800126a:	0209      	lsls	r1, r1, #8
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800126c:	0412      	lsls	r2, r2, #16
      outalpha = (uint32_t)0x00000000;
 800126e:	2400      	movs	r4, #0
 8001270:	e7d9      	b.n	8001226 <DMA2D_Init+0x36>
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8001272:	2c02      	cmp	r4, #2
 8001274:	d102      	bne.n	800127c <DMA2D_Init+0x8c>
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8001276:	0149      	lsls	r1, r1, #5
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 8001278:	02d2      	lsls	r2, r2, #11
 800127a:	e7f8      	b.n	800126e <DMA2D_Init+0x7e>
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 800127c:	2c03      	cmp	r4, #3
 800127e:	6944      	ldr	r4, [r0, #20]
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8001280:	bf03      	ittte	eq
 8001282:	0149      	lsleq	r1, r1, #5
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 8001284:	0292      	lsleq	r2, r2, #10
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 8001286:	03e4      	lsleq	r4, r4, #15
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 8001288:	0109      	lslne	r1, r1, #4
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 800128a:	bf1c      	itt	ne
 800128c:	0212      	lslne	r2, r2, #8
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 800128e:	0324      	lslne	r4, r4, #12
 8001290:	e7c9      	b.n	8001226 <DMA2D_Init+0x36>
 8001292:	bf00      	nop
 8001294:	4002b000 	.word	0x4002b000

08001298 <DMA2D_StartTransfer>:
  */

void DMA2D_StartTransfer(void)
{
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8001298:	4a02      	ldr	r2, [pc, #8]	; (80012a4 <DMA2D_StartTransfer+0xc>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4770      	bx	lr
 80012a4:	4002b000 	.word	0x4002b000

080012a8 <DMA2D_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <DMA2D_GetFlagStatus+0x10>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4203      	tst	r3, r0
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
}
 80012ae:	bf14      	ite	ne
 80012b0:	2001      	movne	r0, #1
 80012b2:	2000      	moveq	r0, #0
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	4002b000 	.word	0x4002b000

080012bc <FMC_SDRAMInit>:
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80012bc:	6882      	ldr	r2, [r0, #8]
 80012be:	6843      	ldr	r3, [r0, #4]
 80012c0:	4927      	ldr	r1, [pc, #156]	; (8001360 <FMC_SDRAMInit+0xa4>)
 80012c2:	4313      	orrs	r3, r2
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80012c4:	68c2      	ldr	r2, [r0, #12]
 80012c6:	4313      	orrs	r3, r2
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80012c8:	6902      	ldr	r2, [r0, #16]
 80012ca:	4313      	orrs	r3, r2
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80012cc:	6942      	ldr	r2, [r0, #20]
 80012ce:	4313      	orrs	r3, r2
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80012d0:	6982      	ldr	r2, [r0, #24]
{ 
 80012d2:	b5f0      	push	{r4, r5, r6, r7, lr}
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80012d4:	69c4      	ldr	r4, [r0, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80012d6:	6a06      	ldr	r6, [r0, #32]
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80012d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 80012da:	6807      	ldr	r7, [r0, #0]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80012dc:	4313      	orrs	r3, r2
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80012de:	4323      	orrs	r3, r4
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80012e0:	4333      	orrs	r3, r6
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80012e2:	432b      	orrs	r3, r5
 80012e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 80012e6:	b9e7      	cbnz	r7, 8001322 <FMC_SDRAMInit+0x66>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 80012e8:	600b      	str	r3, [r1, #0]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80012ea:	6853      	ldr	r3, [r2, #4]
 80012ec:	1e58      	subs	r0, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80012ee:	6893      	ldr	r3, [r2, #8]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80012f4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	3801      	subs	r0, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80012fc:	4303      	orrs	r3, r0
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80012fe:	68d0      	ldr	r0, [r2, #12]
 8001300:	3801      	subs	r0, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8001302:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8001306:	6910      	ldr	r0, [r2, #16]
 8001308:	3801      	subs	r0, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800130a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800130e:	6950      	ldr	r0, [r2, #20]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8001310:	6992      	ldr	r2, [r2, #24]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8001312:	3801      	subs	r0, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8001314:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8001318:	3a01      	subs	r2, #1
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800131a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800131e:	608b      	str	r3, [r1, #8]
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8001322:	4334      	orrs	r4, r6
 8001324:	4325      	orrs	r5, r4
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8001326:	600d      	str	r5, [r1, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8001328:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800132c:	6853      	ldr	r3, [r2, #4]
 800132e:	1e58      	subs	r0, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8001330:	6893      	ldr	r3, [r2, #8]
 8001332:	3b01      	subs	r3, #1
 8001334:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8001336:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800133a:	6810      	ldr	r0, [r2, #0]
 800133c:	3801      	subs	r0, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800133e:	4303      	orrs	r3, r0
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8001340:	6910      	ldr	r0, [r2, #16]
 8001342:	3801      	subs	r0, #1
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8001344:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8001348:	68d0      	ldr	r0, [r2, #12]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800134a:	6952      	ldr	r2, [r2, #20]
 800134c:	3a01      	subs	r2, #1
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800134e:	3801      	subs	r0, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8001350:	0512      	lsls	r2, r2, #20
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8001352:	3702      	adds	r7, #2
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8001354:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8001358:	608a      	str	r2, [r1, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800135a:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001360:	a0000140 	.word	0xa0000140

08001364 <FMC_SDRAMCmdConfig>:
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8001364:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001368:	4313      	orrs	r3, r2
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 800136a:	68c2      	ldr	r2, [r0, #12]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800136c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8001370:	6882      	ldr	r2, [r0, #8]
 8001372:	3a01      	subs	r2, #1
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8001374:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  
  FMC_Bank5_6->SDCMR = tmpr;
 8001378:	4a01      	ldr	r2, [pc, #4]	; (8001380 <FMC_SDRAMCmdConfig+0x1c>)
 800137a:	6113      	str	r3, [r2, #16]
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	a0000140 	.word	0xa0000140

08001384 <FMC_SetRefreshCount>:
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8001384:	4a02      	ldr	r2, [pc, #8]	; (8001390 <FMC_SetRefreshCount+0xc>)
 8001386:	6953      	ldr	r3, [r2, #20]
 8001388:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 800138c:	6150      	str	r0, [r2, #20]
 800138e:	4770      	bx	lr
 8001390:	a0000140 	.word	0xa0000140

08001394 <FMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8001394:	2810      	cmp	r0, #16
 8001396:	d107      	bne.n	80013a8 <FMC_GetFlagStatus+0x14>
  {
    tmpsr = FMC_Bank2->SR2;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <FMC_GetFlagStatus+0x30>)
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    tmpsr = FMC_Bank3->SR3;
 800139a:	685b      	ldr	r3, [r3, #4]
  {
    tmpsr = FMC_Bank5_6->SDSR;
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 800139c:	ea31 0303 	bics.w	r3, r1, r3
  {
    bitstatus = SET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80013a0:	bf0c      	ite	eq
 80013a2:	2001      	moveq	r0, #1
 80013a4:	2000      	movne	r0, #0
 80013a6:	4770      	bx	lr
  else if(FMC_Bank == FMC_Bank3_NAND)
 80013a8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80013ac:	d101      	bne.n	80013b2 <FMC_GetFlagStatus+0x1e>
    tmpsr = FMC_Bank3->SR3;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <FMC_GetFlagStatus+0x34>)
 80013b0:	e7f3      	b.n	800139a <FMC_GetFlagStatus+0x6>
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80013b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80013b6:	d101      	bne.n	80013bc <FMC_GetFlagStatus+0x28>
    tmpsr = FMC_Bank4->SR4;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <FMC_GetFlagStatus+0x38>)
 80013ba:	e7ee      	b.n	800139a <FMC_GetFlagStatus+0x6>
    tmpsr = FMC_Bank5_6->SDSR;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <FMC_GetFlagStatus+0x3c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	e7ec      	b.n	800139c <FMC_GetFlagStatus+0x8>
 80013c2:	bf00      	nop
 80013c4:	a0000060 	.word	0xa0000060
 80013c8:	a0000080 	.word	0xa0000080
 80013cc:	a00000a0 	.word	0xa00000a0
 80013d0:	a0000140 	.word	0xa0000140

080013d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80013d8:	680d      	ldr	r5, [r1, #0]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013da:	2200      	movs	r2, #0
    pos = ((uint32_t)0x01) << pinpos;
 80013dc:	2601      	movs	r6, #1

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80013de:	2403      	movs	r4, #3
    pos = ((uint32_t)0x01) << pinpos;
 80013e0:	fa06 fc02 	lsl.w	ip, r6, r2
    if (currentpin == pos)
 80013e4:	ea3c 0305 	bics.w	r3, ip, r5
 80013e8:	d13d      	bne.n	8001466 <GPIO_Init+0x92>
 80013ea:	0057      	lsls	r7, r2, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80013ec:	f8d0 e000 	ldr.w	lr, [r0]
 80013f0:	fa04 f307 	lsl.w	r3, r4, r7
 80013f4:	43db      	mvns	r3, r3
 80013f6:	ea0e 0e03 	and.w	lr, lr, r3
 80013fa:	f8c0 e000 	str.w	lr, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013fe:	f891 e004 	ldrb.w	lr, [r1, #4]
 8001402:	f8d0 9000 	ldr.w	r9, [r0]
 8001406:	fa0e f807 	lsl.w	r8, lr, r7

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800140a:	f10e 3eff 	add.w	lr, lr, #4294967295
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800140e:	ea48 0809 	orr.w	r8, r8, r9
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001412:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001416:	f8c0 8000 	str.w	r8, [r0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800141a:	d817      	bhi.n	800144c <GPIO_Init+0x78>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800141c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001420:	ea03 030e 	and.w	r3, r3, lr
 8001424:	6083      	str	r3, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001426:	794b      	ldrb	r3, [r1, #5]
 8001428:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800142c:	40bb      	lsls	r3, r7
 800142e:	ea43 030e 	orr.w	r3, r3, lr
 8001432:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001434:	6843      	ldr	r3, [r0, #4]
 8001436:	ea23 030c 	bic.w	r3, r3, ip
 800143a:	6043      	str	r3, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800143c:	798b      	ldrb	r3, [r1, #6]
 800143e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001442:	4093      	lsls	r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	ea43 030e 	orr.w	r3, r3, lr
 800144a:	6043      	str	r3, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800144c:	68c3      	ldr	r3, [r0, #12]
 800144e:	fa04 fe07 	lsl.w	lr, r4, r7
 8001452:	ea23 030e 	bic.w	r3, r3, lr
 8001456:	60c3      	str	r3, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001458:	79cb      	ldrb	r3, [r1, #7]
 800145a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800145e:	40bb      	lsls	r3, r7
 8001460:	ea43 030e 	orr.w	r3, r3, lr
 8001464:	60c3      	str	r3, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001466:	3201      	adds	r2, #1
 8001468:	2a10      	cmp	r2, #16
 800146a:	d1b9      	bne.n	80013e0 <GPIO_Init+0xc>
    }
  }
}
 800146c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001470 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001470:	8301      	strh	r1, [r0, #24]
 8001472:	4770      	bx	lr

08001474 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001474:	8341      	strh	r1, [r0, #26]
 8001476:	4770      	bx	lr

08001478 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001478:	b10a      	cbz	r2, 800147e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800147a:	8301      	strh	r1, [r0, #24]
 800147c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800147e:	8341      	strh	r1, [r0, #26]
 8001480:	4770      	bx	lr

08001482 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001482:	f001 0307 	and.w	r3, r1, #7
 8001486:	08c9      	lsrs	r1, r1, #3
 8001488:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
 800148c:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800148e:	6a01      	ldr	r1, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001490:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001492:	240f      	movs	r4, #15
 8001494:	409c      	lsls	r4, r3
 8001496:	ea21 0104 	bic.w	r1, r1, r4
 800149a:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800149c:	6a01      	ldr	r1, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800149e:	409a      	lsls	r2, r3
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80014a0:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80014a2:	6202      	str	r2, [r0, #32]
 80014a4:	bd10      	pop	{r4, pc}
	...

080014a8 <LTDC_Init>:
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <LTDC_Init+0x90>)
 80014aa:	4924      	ldr	r1, [pc, #144]	; (800153c <LTDC_Init+0x94>)
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	400a      	ands	r2, r1
{
 80014b0:	b530      	push	{r4, r5, lr}
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80014b2:	609a      	str	r2, [r3, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	6945      	ldr	r5, [r0, #20]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 80014b8:	6904      	ldr	r4, [r0, #16]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80014ba:	432a      	orrs	r2, r5
 80014bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80014c0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	400a      	ands	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69c5      	ldr	r5, [r0, #28]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 80014cc:	6984      	ldr	r4, [r0, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80014ce:	432a      	orrs	r2, r5
 80014d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80014d4:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	400a      	ands	r2, r1
 80014da:	611a      	str	r2, [r3, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	6a45      	ldr	r5, [r0, #36]	; 0x24
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80014e0:	6a04      	ldr	r4, [r0, #32]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80014e2:	432a      	orrs	r2, r5
 80014e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80014e8:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	4011      	ands	r1, r2
 80014ee:	6159      	str	r1, [r3, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 80014f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80014f6:	4322      	orrs	r2, r4
 80014f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014fc:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80014fe:	6999      	ldr	r1, [r3, #24]
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <LTDC_Init+0x98>)
 8001502:	400a      	ands	r2, r1
 8001504:	619a      	str	r2, [r3, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8001506:	e890 0014 	ldmia.w	r0, {r2, r4}
 800150a:	6999      	ldr	r1, [r3, #24]
 800150c:	4322      	orrs	r2, r4
 800150e:	430a      	orrs	r2, r1
 8001510:	6881      	ldr	r1, [r0, #8]
 8001512:	430a      	orrs	r2, r1
 8001514:	68c1      	ldr	r1, [r0, #12]
 8001516:	430a      	orrs	r2, r1
 8001518:	619a      	str	r2, [r3, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800151a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800151c:	6b45      	ldr	r5, [r0, #52]	; 0x34
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800151e:	6b04      	ldr	r4, [r0, #48]	; 0x30
  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001520:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001524:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800152a:	430a      	orrs	r2, r1
 800152c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001530:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
 8001536:	bd30      	pop	{r4, r5, pc}
 8001538:	40016800 	.word	0x40016800
 800153c:	f000f800 	.word	0xf000f800
 8001540:	0ffe888f 	.word	0x0ffe888f

08001544 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <LTDC_Cmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8001546:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8001548:	b118      	cbz	r0, 8001552 <LTDC_Cmd+0xe>
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800154a:	f042 0201 	orr.w	r2, r2, #1
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	4770      	bx	lr
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	e7fa      	b.n	800154e <LTDC_Cmd+0xa>
 8001558:	40016800 	.word	0x40016800

0800155c <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <LTDC_DitherCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800155e:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8001560:	b118      	cbz	r0, 800156a <LTDC_DitherCmd+0xe>
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8001562:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	4770      	bx	lr
 800156a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800156e:	e7fa      	b.n	8001566 <LTDC_DitherCmd+0xa>
 8001570:	40016800 	.word	0x40016800

08001574 <LTDC_ReloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <LTDC_ReloadConfig+0x8>)
 8001576:	6258      	str	r0, [r3, #36]	; 0x24
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40016800 	.word	0x40016800

08001580 <LTDC_LayerInit>:
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001580:	6842      	ldr	r2, [r0, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8001582:	680b      	ldr	r3, [r1, #0]
{
 8001584:	b530      	push	{r4, r5, lr}
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 8001586:	684c      	ldr	r4, [r1, #4]
  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8001588:	69cd      	ldr	r5, [r1, #28]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800158a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800158e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001592:	6042      	str	r2, [r0, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8001594:	6043      	str	r3, [r0, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001596:	6882      	ldr	r2, [r0, #8]
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8001598:	68cc      	ldr	r4, [r1, #12]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800159a:	688b      	ldr	r3, [r1, #8]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800159c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80015a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80015a4:	6082      	str	r2, [r0, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80015a6:	6083      	str	r3, [r0, #8]
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 80015a8:	6903      	ldr	r3, [r0, #16]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 80015aa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 80015ac:	f023 0307 	bic.w	r3, r3, #7
 80015b0:	6103      	str	r3, [r0, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 80015b2:	690b      	ldr	r3, [r1, #16]
 80015b4:	6103      	str	r3, [r0, #16]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80015b6:	6a0b      	ldr	r3, [r1, #32]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80015b8:	6982      	ldr	r2, [r0, #24]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80015ba:	041b      	lsls	r3, r3, #16
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80015bc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80015c0:	698d      	ldr	r5, [r1, #24]
 80015c2:	432b      	orrs	r3, r5
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80015c4:	2200      	movs	r2, #0
                        dcred | dcalpha);
 80015c6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80015ca:	6182      	str	r2, [r0, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80015cc:	6183      	str	r3, [r0, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80015ce:	6943      	ldr	r3, [r0, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 80015d0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80015d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015d6:	6143      	str	r3, [r0, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 80015d8:	694b      	ldr	r3, [r1, #20]
 80015da:	6143      	str	r3, [r0, #20]
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80015dc:	69c3      	ldr	r3, [r0, #28]
 80015de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e2:	f023 0307 	bic.w	r3, r3, #7
 80015e6:	61c3      	str	r3, [r0, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 80015e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80015ea:	4323      	orrs	r3, r4
 80015ec:	61c3      	str	r3, [r0, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80015ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015f0:	6282      	str	r2, [r0, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 80015f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015f4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80015f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 80015f8:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80015fa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80015fc:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8001600:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001604:	62c2      	str	r2, [r0, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8001606:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001608:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800160a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800160e:	f023 0307 	bic.w	r3, r3, #7
 8001612:	6303      	str	r3, [r0, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8001614:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001616:	6303      	str	r3, [r0, #48]	; 0x30
 8001618:	bd30      	pop	{r4, r5, pc}

0800161a <LTDC_LayerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800161a:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800161c:	b119      	cbz	r1, 8001626 <LTDC_LayerCmd+0xc>
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800161e:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8001622:	6003      	str	r3, [r0, #0]
 8001624:	4770      	bx	lr
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	e7fa      	b.n	8001622 <LTDC_LayerCmd+0x8>

0800162c <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800162c:	0712      	lsls	r2, r2, #28
 800162e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001632:	4b03      	ldr	r3, [pc, #12]	; (8001640 <RCC_PLLSAIConfig+0x14>)
 8001634:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <RCC_PLLSAICmd+0x8>)
 8001646:	6018      	str	r0, [r3, #0]
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	42470070 	.word	0x42470070

08001650 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <RCC_GetClocksFreq+0x78>)
 8001652:	6893      	ldr	r3, [r2, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001658:	2b04      	cmp	r3, #4
{
 800165a:	b510      	push	{r4, lr}
  switch (tmp)
 800165c:	d01a      	beq.n	8001694 <RCC_GetClocksFreq+0x44>
 800165e:	2b08      	cmp	r3, #8
 8001660:	d01a      	beq.n	8001698 <RCC_GetClocksFreq+0x48>
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <RCC_GetClocksFreq+0x7c>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <RCC_GetClocksFreq+0x78>)
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001666:	6003      	str	r3, [r0, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001668:	6893      	ldr	r3, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800166a:	4919      	ldr	r1, [pc, #100]	; (80016d0 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 800166c:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001670:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001672:	6803      	ldr	r3, [r0, #0]
 8001674:	40e3      	lsrs	r3, r4
 8001676:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001678:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 800167a:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800167e:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001680:	fa23 f404 	lsr.w	r4, r3, r4
 8001684:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001686:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
 8001688:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 800168c:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800168e:	40d3      	lsrs	r3, r2
 8001690:	60c3      	str	r3, [r0, #12]
 8001692:	bd10      	pop	{r4, pc}
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <RCC_GetClocksFreq+0x84>)
 8001696:	e7e5      	b.n	8001664 <RCC_GetClocksFreq+0x14>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001698:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800169a:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800169c:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 800169e:	0263      	lsls	r3, r4, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80016a0:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80016a8:	bf4c      	ite	mi
 80016aa:	4b0a      	ldrmi	r3, [pc, #40]	; (80016d4 <RCC_GetClocksFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80016ac:	4b07      	ldrpl	r3, [pc, #28]	; (80016cc <RCC_GetClocksFreq+0x7c>)
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	4353      	muls	r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <RCC_GetClocksFreq+0x78>)
 80016b6:	6852      	ldr	r2, [r2, #4]
 80016b8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80016bc:	3201      	adds	r2, #1
 80016be:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80016c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016c4:	e7ce      	b.n	8001664 <RCC_GetClocksFreq+0x14>
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	20000010 	.word	0x20000010
 80016d4:	007a1200 	.word	0x007a1200

080016d8 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <RCC_LTDCCLKDivConfig+0x14>)
 80016da:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 80016de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 80016e2:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80016e4:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80016f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  if (NewState != DISABLE)
 80016f4:	b111      	cbz	r1, 80016fc <RCC_AHB1PeriphClockCmd+0xc>
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80016f6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80016f8:	6318      	str	r0, [r3, #48]	; 0x30
 80016fa:	4770      	bx	lr
 80016fc:	ea22 0000 	bic.w	r0, r2, r0
 8001700:	e7fa      	b.n	80016f8 <RCC_AHB1PeriphClockCmd+0x8>
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800170a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  if (NewState != DISABLE)
 800170c:	b111      	cbz	r1, 8001714 <RCC_AHB3PeriphClockCmd+0xc>
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800170e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001710:	6398      	str	r0, [r3, #56]	; 0x38
 8001712:	4770      	bx	lr
 8001714:	ea22 0000 	bic.w	r0, r2, r0
 8001718:	e7fa      	b.n	8001710 <RCC_AHB3PeriphClockCmd+0x8>
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (NewState != DISABLE)
 8001724:	b111      	cbz	r1, 800172c <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 8001726:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001728:	6458      	str	r0, [r3, #68]	; 0x44
 800172a:	4770      	bx	lr
 800172c:	ea22 0000 	bic.w	r0, r2, r0
 8001730:	e7fa      	b.n	8001728 <RCC_APB2PeriphClockCmd+0x8>
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800173a:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 800173c:	b111      	cbz	r1, 8001744 <RCC_AHB1PeriphResetCmd+0xc>
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800173e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001740:	6118      	str	r0, [r3, #16]
 8001742:	4770      	bx	lr
 8001744:	ea22 0000 	bic.w	r0, r2, r0
 8001748:	e7fa      	b.n	8001740 <RCC_AHB1PeriphResetCmd+0x8>
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001752:	6a1a      	ldr	r2, [r3, #32]
  if (NewState != DISABLE)
 8001754:	b111      	cbz	r1, 800175c <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001756:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001758:	6218      	str	r0, [r3, #32]
 800175a:	4770      	bx	lr
 800175c:	ea22 0000 	bic.w	r0, r2, r0
 8001760:	e7fa      	b.n	8001758 <RCC_APB1PeriphResetCmd+0x8>
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800176a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (NewState != DISABLE)
 800176c:	b111      	cbz	r1, 8001774 <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 800176e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001770:	6258      	str	r0, [r3, #36]	; 0x24
 8001772:	4770      	bx	lr
 8001774:	ea22 0000 	bic.w	r0, r2, r0
 8001778:	e7fa      	b.n	8001770 <RCC_APB2PeriphResetCmd+0x8>
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001780:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001782:	2a01      	cmp	r2, #1
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <RCC_GetFlagStatus+0x24>)
 8001786:	d107      	bne.n	8001798 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8001788:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800178a:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800178e:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001792:	f000 0001 	and.w	r0, r0, #1
 8001796:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001798:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 800179a:	bf0c      	ite	eq
 800179c:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
    statusreg = RCC->CSR;
 800179e:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
 80017a0:	e7f3      	b.n	800178a <RCC_GetFlagStatus+0xa>
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80017a8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <SPI_I2S_DeInit+0xa0>)
 80017ac:	4298      	cmp	r0, r3
 80017ae:	d10b      	bne.n	80017c8 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80017b0:	2101      	movs	r1, #1
 80017b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017b6:	f7ff ffd7 	bl	8001768 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80017ba:	2100      	movs	r1, #0
 80017bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80017c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80017c4:	f7ff bfd0 	b.w	8001768 <RCC_APB2PeriphResetCmd>
  else if (SPIx == SPI2)
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <SPI_I2S_DeInit+0xa4>)
 80017ca:	4298      	cmp	r0, r3
 80017cc:	d10b      	bne.n	80017e6 <SPI_I2S_DeInit+0x3e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80017ce:	2101      	movs	r1, #1
 80017d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017d4:	f7ff ffbc 	bl	8001750 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80017d8:	2100      	movs	r1, #0
 80017da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
}
 80017de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80017e2:	f7ff bfb5 	b.w	8001750 <RCC_APB1PeriphResetCmd>
  else if (SPIx == SPI3)
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <SPI_I2S_DeInit+0xa8>)
 80017e8:	4298      	cmp	r0, r3
 80017ea:	d108      	bne.n	80017fe <SPI_I2S_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80017ec:	2101      	movs	r1, #1
 80017ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017f2:	f7ff ffad 	bl	8001750 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80017f6:	2100      	movs	r1, #0
 80017f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017fc:	e7ef      	b.n	80017de <SPI_I2S_DeInit+0x36>
  else if (SPIx == SPI4)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <SPI_I2S_DeInit+0xac>)
 8001800:	4298      	cmp	r0, r3
 8001802:	d108      	bne.n	8001816 <SPI_I2S_DeInit+0x6e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001804:	2101      	movs	r1, #1
 8001806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800180a:	f7ff ffad 	bl	8001768 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800180e:	2100      	movs	r1, #0
 8001810:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001814:	e7d4      	b.n	80017c0 <SPI_I2S_DeInit+0x18>
  else if (SPIx == SPI5)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <SPI_I2S_DeInit+0xb0>)
 8001818:	4298      	cmp	r0, r3
 800181a:	d108      	bne.n	800182e <SPI_I2S_DeInit+0x86>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 800181c:	2101      	movs	r1, #1
 800181e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001822:	f7ff ffa1 	bl	8001768 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001826:	2100      	movs	r1, #0
 8001828:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800182c:	e7c8      	b.n	80017c0 <SPI_I2S_DeInit+0x18>
    if (SPIx == SPI6)
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <SPI_I2S_DeInit+0xb4>)
 8001830:	4298      	cmp	r0, r3
 8001832:	d108      	bne.n	8001846 <SPI_I2S_DeInit+0x9e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001834:	2101      	movs	r1, #1
 8001836:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800183a:	f7ff ff95 	bl	8001768 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800183e:	2100      	movs	r1, #0
 8001840:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001844:	e7bc      	b.n	80017c0 <SPI_I2S_DeInit+0x18>
 8001846:	bd08      	pop	{r3, pc}
 8001848:	40013000 	.word	0x40013000
 800184c:	40003800 	.word	0x40003800
 8001850:	40003c00 	.word	0x40003c00
 8001854:	40013400 	.word	0x40013400
 8001858:	40015000 	.word	0x40015000
 800185c:	40015400 	.word	0x40015400

08001860 <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001860:	8803      	ldrh	r3, [r0, #0]
{
 8001862:	b510      	push	{r4, lr}
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001864:	f403 5241 	and.w	r2, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001868:	884c      	ldrh	r4, [r1, #2]
 800186a:	880b      	ldrh	r3, [r1, #0]
 800186c:	4323      	orrs	r3, r4
 800186e:	888c      	ldrh	r4, [r1, #4]
 8001870:	4323      	orrs	r3, r4
 8001872:	88cc      	ldrh	r4, [r1, #6]
 8001874:	4323      	orrs	r3, r4
 8001876:	890c      	ldrh	r4, [r1, #8]
 8001878:	4323      	orrs	r3, r4
 800187a:	894c      	ldrh	r4, [r1, #10]
 800187c:	4323      	orrs	r3, r4
 800187e:	898c      	ldrh	r4, [r1, #12]
 8001880:	4323      	orrs	r3, r4
 8001882:	89cc      	ldrh	r4, [r1, #14]
 8001884:	4323      	orrs	r3, r4
 8001886:	4313      	orrs	r3, r2
 8001888:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800188a:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800188c:	8b83      	ldrh	r3, [r0, #28]
 800188e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001898:	8a0b      	ldrh	r3, [r1, #16]
 800189a:	8203      	strh	r3, [r0, #16]
 800189c:	bd10      	pop	{r4, pc}

0800189e <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800189e:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80018a0:	b121      	cbz	r1, 80018ac <SPI_Cmd+0xe>
    SPIx->CR1 |= SPI_CR1_SPE;
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80018a8:	8003      	strh	r3, [r0, #0]
 80018aa:	4770      	bx	lr
 80018ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	e7f8      	b.n	80018a8 <SPI_Cmd+0xa>

080018b6 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80018b6:	8980      	ldrh	r0, [r0, #12]
}
 80018b8:	b280      	uxth	r0, r0
 80018ba:	4770      	bx	lr

080018bc <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80018bc:	8181      	strh	r1, [r0, #12]
 80018be:	4770      	bx	lr

080018c0 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80018c0:	8903      	ldrh	r3, [r0, #8]
 80018c2:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80018c4:	bf14      	ite	ne
 80018c6:	2001      	movne	r0, #1
 80018c8:	2000      	moveq	r0, #0
 80018ca:	4770      	bx	lr

080018cc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
  ldr  r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f2:	f000 f9f9 	bl	8001ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f000 fa83 	bl	8001e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f000 f879 	bl	80019f0 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr  r3, =_sidata
 8001900:	08003038 	.word	0x08003038
  ldr  r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001908:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 800190c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001910:	20000094 	.word	0x20000094

08001914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>
	...

08001918 <Demo_GyroReadAngRate>:
* @brief  Calculate the angular Data rate Gyroscope.
* @param  pfData : Data out pointer
* @retval None
*/
static void Demo_GyroReadAngRate (float* pfData)
{
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b087      	sub	sp, #28
 800191c:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 800191e:	a806      	add	r0, sp, #24
  uint8_t tmpbuffer[6] ={0};
 8001920:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
 8001922:	ad04      	add	r5, sp, #16
  uint8_t tmpreg = 0;
 8001924:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  L3GD20_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001928:	2201      	movs	r2, #1
 800192a:	2123      	movs	r1, #35	; 0x23
  uint8_t tmpbuffer[6] ={0};
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 8001932:	9304      	str	r3, [sp, #16]
 8001934:	80ab      	strh	r3, [r5, #4]
  L3GD20_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001936:	f7fe fd6b 	bl	8000410 <L3GD20_Read>
  
  L3GD20_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800193a:	2206      	movs	r2, #6
 800193c:	2128      	movs	r1, #40	; 0x28
 800193e:	a802      	add	r0, sp, #8
 8001940:	f7fe fd66 	bl	8000410 <L3GD20_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & 0x40))
 8001944:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001948:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800194c:	f89d e008 	ldrb.w	lr, [sp, #8]
 8001950:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8001954:	f89d 600a 	ldrb.w	r6, [sp, #10]
 8001958:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800195c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001960:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001964:	d12a      	bne.n	80019bc <Demo_GyroReadAngRate+0xa4>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001966:	eb0e 2707 	add.w	r7, lr, r7, lsl #8
 800196a:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 800196e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8001972:	f8ad 0012 	strh.w	r0, [sp, #18]
 8001976:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & 0x30)
 800197a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800197e:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001980:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & 0x30)
 8001984:	d025      	beq.n	80019d2 <Demo_GyroReadAngRate+0xba>
 8001986:	2b20      	cmp	r3, #32
 8001988:	d026      	beq.n	80019d8 <Demo_GyroReadAngRate+0xc0>
  float sensitivity = 0;
 800198a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019e0 <Demo_GyroReadAngRate+0xc8>
 800198e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80019e4 <Demo_GyroReadAngRate+0xcc>
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf18      	it	ne
 8001996:	eef0 7a47 	vmovne.f32	s15, s14
 800199a:	4620      	mov	r0, r4
  case 0x20:
    sensitivity=L3G_Sensitivity_2000dps;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 800199c:	2300      	movs	r3, #0
  {
  pfData[i]=(float)RawData[i]/sensitivity;
 800199e:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 80019a2:	ee07 2a10 	vmov	s14, r2
 80019a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  for(i=0; i<3; i++)
 80019aa:	3301      	adds	r3, #1
  pfData[i]=(float)RawData[i]/sensitivity;
 80019ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
  for(i=0; i<3; i++)
 80019b0:	2b03      	cmp	r3, #3
  pfData[i]=(float)RawData[i]/sensitivity;
 80019b2:	ece0 6a01 	vstmia	r0!, {s13}
  for(i=0; i<3; i++)
 80019b6:	d1f2      	bne.n	800199e <Demo_GyroReadAngRate+0x86>
  }
}
 80019b8:	b007      	add	sp, #28
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80019bc:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 80019c0:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80019c4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80019c8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80019cc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80019d0:	e7d3      	b.n	800197a <Demo_GyroReadAngRate+0x62>
    sensitivity=L3G_Sensitivity_500dps;
 80019d2:	eddf 7a05 	vldr	s15, [pc, #20]	; 80019e8 <Demo_GyroReadAngRate+0xd0>
    break;
 80019d6:	e7e0      	b.n	800199a <Demo_GyroReadAngRate+0x82>
    sensitivity=L3G_Sensitivity_2000dps;
 80019d8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80019ec <Demo_GyroReadAngRate+0xd4>
    break;
 80019dc:	e7dd      	b.n	800199a <Demo_GyroReadAngRate+0x82>
 80019de:	bf00      	nop
 80019e0:	00000000 	.word	0x00000000
 80019e4:	42e491ec 	.word	0x42e491ec
 80019e8:	42649254 	.word	0x42649254
 80019ec:	41648f5c 	.word	0x41648f5c

080019f0 <main>:
{
 80019f0:	b580      	push	{r7, lr}
  RCC_GetClocksFreq(&RCC_Clocks);
 80019f2:	4ca7      	ldr	r4, [pc, #668]	; (8001c90 <main+0x2a0>)
{
 80019f4:	b088      	sub	sp, #32
  RCC_GetClocksFreq(&RCC_Clocks);
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fe2a 	bl	8001650 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	fbb3 f3f2 	udiv	r3, r3, r2
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001a04:	3b01      	subs	r3, #1
 8001a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0a:	d209      	bcs.n	8001a20 <main+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001a0c:	4aa1      	ldr	r2, [pc, #644]	; (8001c94 <main+0x2a4>)
 8001a0e:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001a10:	4ba1      	ldr	r3, [pc, #644]	; (8001c98 <main+0x2a8>)
 8001a12:	21f0      	movs	r1, #240	; 0xf0
 8001a14:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	6013      	str	r3, [r2, #0]
  LCD_Init();
 8001a20:	f7ff f93c 	bl	8000c9c <LCD_Init>
  LCD_LayerInit();
 8001a24:	f7fe fd5a 	bl	80004dc <LCD_LayerInit>
  LTDC_Cmd(ENABLE);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fd8b 	bl	8001544 <LTDC_Cmd>
  LCD_SetLayer(LCD_FOREGROUND_LAYER);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7fe fdb4 	bl	800059c <LCD_SetLayer>
  LCD_Clear(LCD_COLOR_WHITE);
 8001a34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a38:	f7fe fdca 	bl	80005d0 <LCD_Clear>
  L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	f88d 3018 	strb.w	r3, [sp, #24]
  L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001a42:	2307      	movs	r3, #7
  L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001a44:	2400      	movs	r4, #0
  L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001a46:	f88d 301a 	strb.w	r3, [sp, #26]
  L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8001a4a:	2510      	movs	r5, #16
  L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001a4c:	2330      	movs	r3, #48	; 0x30
  L3GD20_Init(&L3GD20_InitStructure);
 8001a4e:	a806      	add	r0, sp, #24
  L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001a50:	f88d 301b 	strb.w	r3, [sp, #27]
  L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001a54:	f88d 4019 	strb.w	r4, [sp, #25]
  L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001a58:	f88d 401c 	strb.w	r4, [sp, #28]
  L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001a5c:	f88d 401d 	strb.w	r4, [sp, #29]
  L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8001a60:	f88d 501e 	strb.w	r5, [sp, #30]
  L3GD20_Init(&L3GD20_InitStructure);
 8001a64:	f7fe fc12 	bl	800028c <L3GD20_Init>
  L3GD20_FilterConfig(&L3GD20_FilterStructure) ;
 8001a68:	a805      	add	r0, sp, #20
  L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8001a6a:	f88d 4014 	strb.w	r4, [sp, #20]
  L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001a6e:	f88d 4015 	strb.w	r4, [sp, #21]
  L3GD20_FilterConfig(&L3GD20_FilterStructure) ;
 8001a72:	f7fe fcef 	bl	8000454 <L3GD20_FilterConfig>
  L3GD20_FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7fe fd06 	bl	8000488 <L3GD20_FilterCmd>
 8001a7c:	4c87      	ldr	r4, [pc, #540]	; (8001c9c <main+0x2ac>)
 8001a7e:	4f88      	ldr	r7, [pc, #544]	; (8001ca0 <main+0x2b0>)
 8001a80:	4e88      	ldr	r6, [pc, #544]	; (8001ca4 <main+0x2b4>)
 8001a82:	f240 18f5 	movw	r8, #501	; 0x1f5
static void Gyro_SimpleCalibration(float* GyroData)
{
  uint32_t BiasErrorSplNbr = 500;
  int i = 0;
  
  for (i = 0; i < BiasErrorSplNbr; i++)
 8001a86:	f1b8 0801 	subs.w	r8, r8, #1
 8001a8a:	4d87      	ldr	r5, [pc, #540]	; (8001ca8 <main+0x2b8>)
 8001a8c:	f040 80a4 	bne.w	8001bd8 <main+0x1e8>
    X_BiasError += GyroData[0];
    Y_BiasError += GyroData[1];
    Z_BiasError += GyroData[2];
  }
  /* Set bias errors */
  X_BiasError /= BiasErrorSplNbr;
 8001a90:	ed97 7a00 	vldr	s14, [r7]
 8001a94:	eddf 7a85 	vldr	s15, [pc, #532]	; 8001cac <main+0x2bc>
  Y_BiasError /= BiasErrorSplNbr;
  Z_BiasError /= BiasErrorSplNbr;
 8001a98:	edd5 5a00 	vldr	s11, [r5]
  X_BiasError /= BiasErrorSplNbr;
 8001a9c:	ee87 6a27 	vdiv.f32	s12, s14, s15
  Y_BiasError /= BiasErrorSplNbr;
 8001aa0:	ed96 7a00 	vldr	s14, [r6]
  X_BiasError /= BiasErrorSplNbr;
 8001aa4:	ed87 6a00 	vstr	s12, [r7]
  Y_BiasError /= BiasErrorSplNbr;
 8001aa8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  Yval = ABS((int8_t)(Buffer[1])); 
 8001aac:	4f80      	ldr	r7, [pc, #512]	; (8001cb0 <main+0x2c0>)
  Z_BiasError /= BiasErrorSplNbr;
 8001aae:	ee85 7aa7 	vdiv.f32	s14, s11, s15
  Y_BiasError /= BiasErrorSplNbr;
 8001ab2:	edc6 6a00 	vstr	s13, [r6]
  Z_BiasError /= BiasErrorSplNbr;
 8001ab6:	ed85 7a00 	vstr	s14, [r5]
  Xval = ABS((int8_t)(Buffer[0]));
 8001aba:	4e7e      	ldr	r6, [pc, #504]	; (8001cb4 <main+0x2c4>)
  Demo_GyroReadAngRate(Buffer);
 8001abc:	4d7e      	ldr	r5, [pc, #504]	; (8001cb8 <main+0x2c8>)
  
  /* Get offset value on X, Y and Z */
  GyroData[0] = X_BiasError;
 8001abe:	ed84 6a00 	vstr	s12, [r4]
  GyroData[1] = Y_BiasError;
 8001ac2:	edc4 6a01 	vstr	s13, [r4, #4]
  GyroData[2] = Z_BiasError;
 8001ac6:	ed84 7a02 	vstr	s14, [r4, #8]
  Demo_GyroReadAngRate(Buffer);
 8001aca:	487b      	ldr	r0, [pc, #492]	; (8001cb8 <main+0x2c8>)
 8001acc:	f7ff ff24 	bl	8001918 <Demo_GyroReadAngRate>
  Buffer[0] = (int8_t)Buffer[0] - (int8_t)Gyro[0];
 8001ad0:	edd5 7a00 	vldr	s15, [r5]
 8001ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad8:	edcd 7a02 	vstr	s15, [sp, #8]
 8001adc:	edd4 7a00 	vldr	s15, [r4]
 8001ae0:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8001ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae8:	edcd 7a02 	vstr	s15, [sp, #8]
 8001aec:	f99d 2008 	ldrsb.w	r2, [sp, #8]
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  Buffer[1] = (int8_t)Buffer[1] - (int8_t)Gyro[1];
 8001afa:	edd5 7a01 	vldr	s15, [r5, #4]
  Buffer[0] = (int8_t)Buffer[0] - (int8_t)Gyro[0];
 8001afe:	ed85 7a00 	vstr	s14, [r5]
  Buffer[1] = (int8_t)Buffer[1] - (int8_t)Gyro[1];
 8001b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Xval = ABS((int8_t)(Buffer[0]));
 8001b06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Buffer[1] = (int8_t)Buffer[1] - (int8_t)Gyro[1];
 8001b0a:	edcd 7a02 	vstr	s15, [sp, #8]
 8001b0e:	edd4 7a01 	vldr	s15, [r4, #4]
 8001b12:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8001b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1a:	edcd 7a02 	vstr	s15, [sp, #8]
 8001b1e:	f99d 2008 	ldrsb.w	r2, [sp, #8]
  Xval = ABS((int8_t)(Buffer[0]));
 8001b22:	ed8d 7a02 	vstr	s14, [sp, #8]
  Buffer[1] = (int8_t)Buffer[1] - (int8_t)Gyro[1];
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Xval = ABS((int8_t)(Buffer[0]));
 8001b30:	f99d 2008 	ldrsb.w	r2, [sp, #8]
  Buffer[1] = (int8_t)Buffer[1] - (int8_t)Gyro[1];
 8001b34:	edc5 7a01 	vstr	s15, [r5, #4]
  Yval = ABS((int8_t)(Buffer[1])); 
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Xval = ABS((int8_t)(Buffer[0]));
 8001b3c:	2a00      	cmp	r2, #0
  Yval = ABS((int8_t)(Buffer[1])); 
 8001b3e:	edcd 7a03 	vstr	s15, [sp, #12]
 8001b42:	f99d 300c 	ldrsb.w	r3, [sp, #12]
  Xval = ABS((int8_t)(Buffer[0]));
 8001b46:	bfb8      	it	lt
 8001b48:	4252      	neglt	r2, r2
  Yval = ABS((int8_t)(Buffer[1])); 
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bfb8      	it	lt
 8001b4e:	425b      	neglt	r3, r3
  Xval = ABS((int8_t)(Buffer[0]));
 8001b50:	b2d2      	uxtb	r2, r2
  Yval = ABS((int8_t)(Buffer[1])); 
 8001b52:	b2db      	uxtb	r3, r3
  if ( Xval>Yval)
 8001b54:	429a      	cmp	r2, r3
  Xval = ABS((int8_t)(Buffer[0]));
 8001b56:	7032      	strb	r2, [r6, #0]
  Yval = ABS((int8_t)(Buffer[1])); 
 8001b58:	703b      	strb	r3, [r7, #0]
  if ( Xval>Yval)
 8001b5a:	d959      	bls.n	8001c10 <main+0x220>
    if ((int16_t)Buffer[0] > 40)
 8001b5c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001b60:	2b28      	cmp	r3, #40	; 0x28
 8001b62:	dd17      	ble.n	8001b94 <main+0x1a4>
      LCD_Clear(LCD_COLOR_WHITE);
 8001b64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b68:	f7fe fd32 	bl	80005d0 <LCD_Clear>
      LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001b6c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001b70:	f7fe fd28 	bl	80005c4 <LCD_SetTextColor>
      LCD_DrawFullRect(100, 40, 40, 120);
 8001b74:	2228      	movs	r2, #40	; 0x28
 8001b76:	4611      	mov	r1, r2
 8001b78:	2378      	movs	r3, #120	; 0x78
 8001b7a:	2064      	movs	r0, #100	; 0x64
 8001b7c:	f7fe fd6e 	bl	800065c <LCD_DrawFullRect>
      LCD_FillTriangle(50, 190, 120, 160, 160, 310);
 8001b80:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	23a0      	movs	r3, #160	; 0xa0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2278      	movs	r2, #120	; 0x78
 8001b8c:	21be      	movs	r1, #190	; 0xbe
 8001b8e:	2032      	movs	r0, #50	; 0x32
 8001b90:	f7fe fdfc 	bl	800078c <LCD_FillTriangle>
    if ((int16_t)Buffer[0] < -40)
 8001b94:	edd5 7a00 	vldr	s15, [r5]
 8001b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9c:	edcd 7a02 	vstr	s15, [sp, #8]
 8001ba0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001ba4:	3328      	adds	r3, #40	; 0x28
 8001ba6:	da90      	bge.n	8001aca <main+0xda>
      LCD_Clear(LCD_COLOR_WHITE);
 8001ba8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bac:	f7fe fd10 	bl	80005d0 <LCD_Clear>
      LCD_SetTextColor(LCD_COLOR_RED);
 8001bb0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001bb4:	f7fe fd06 	bl	80005c4 <LCD_SetTextColor>
      LCD_DrawFullRect(100, 160, 40, 120);
 8001bb8:	2378      	movs	r3, #120	; 0x78
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	21a0      	movs	r1, #160	; 0xa0
 8001bbe:	2064      	movs	r0, #100	; 0x64
 8001bc0:	f7fe fd4c 	bl	800065c <LCD_DrawFullRect>
      LCD_FillTriangle(50, 190, 120, 160, 160, 10);
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	23a0      	movs	r3, #160	; 0xa0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2278      	movs	r2, #120	; 0x78
 8001bce:	21be      	movs	r1, #190	; 0xbe
 8001bd0:	2032      	movs	r0, #50	; 0x32
      LCD_FillTriangle(120, 120, 235, 60, 260, 160);
 8001bd2:	f7fe fddb 	bl	800078c <LCD_FillTriangle>
 8001bd6:	e778      	b.n	8001aca <main+0xda>
    Demo_GyroReadAngRate(GyroData);
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7ff fe9d 	bl	8001918 <Demo_GyroReadAngRate>
    X_BiasError += GyroData[0];
 8001bde:	ed97 7a00 	vldr	s14, [r7]
 8001be2:	edd4 7a00 	vldr	s15, [r4]
 8001be6:	ee77 7a87 	vadd.f32	s15, s15, s14
    Y_BiasError += GyroData[1];
 8001bea:	ed96 7a00 	vldr	s14, [r6]
    X_BiasError += GyroData[0];
 8001bee:	edc7 7a00 	vstr	s15, [r7]
    Y_BiasError += GyroData[1];
 8001bf2:	edd4 7a01 	vldr	s15, [r4, #4]
 8001bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
    Z_BiasError += GyroData[2];
 8001bfa:	ed95 7a00 	vldr	s14, [r5]
    Y_BiasError += GyroData[1];
 8001bfe:	edc6 7a00 	vstr	s15, [r6]
    Z_BiasError += GyroData[2];
 8001c02:	edd4 7a02 	vldr	s15, [r4, #8]
 8001c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c0a:	edc5 7a00 	vstr	s15, [r5]
 8001c0e:	e73a      	b.n	8001a86 <main+0x96>
    if ((int16_t)Buffer[1] < -40)
 8001c10:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001c14:	3328      	adds	r3, #40	; 0x28
 8001c16:	da18      	bge.n	8001c4a <main+0x25a>
      LCD_Clear(LCD_COLOR_WHITE);
 8001c18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c1c:	f7fe fcd8 	bl	80005d0 <LCD_Clear>
      LCD_SetTextColor(LCD_COLOR_GREEN);
 8001c20:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001c24:	f7fe fcce 	bl	80005c4 <LCD_SetTextColor>
      LCD_DrawFullRect(120, 140, 100, 40);
 8001c28:	2328      	movs	r3, #40	; 0x28
 8001c2a:	2264      	movs	r2, #100	; 0x64
 8001c2c:	218c      	movs	r1, #140	; 0x8c
 8001c2e:	2078      	movs	r0, #120	; 0x78
 8001c30:	f7fe fd14 	bl	800065c <LCD_DrawFullRect>
      LCD_FillTriangle(120, 120, 5, 60, 260, 160);      
 8001c34:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001c38:	23a0      	movs	r3, #160	; 0xa0
 8001c3a:	e88d 000a 	stmia.w	sp, {r1, r3}
 8001c3e:	2178      	movs	r1, #120	; 0x78
 8001c40:	233c      	movs	r3, #60	; 0x3c
 8001c42:	2205      	movs	r2, #5
 8001c44:	4608      	mov	r0, r1
 8001c46:	f7fe fda1 	bl	800078c <LCD_FillTriangle>
    if ((int16_t)Buffer[1] > 40)
 8001c4a:	edd5 7a01 	vldr	s15, [r5, #4]
 8001c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c52:	edcd 7a02 	vstr	s15, [sp, #8]
 8001c56:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001c5a:	2b28      	cmp	r3, #40	; 0x28
 8001c5c:	f77f af35 	ble.w	8001aca <main+0xda>
      LCD_Clear(LCD_COLOR_WHITE);
 8001c60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c64:	f7fe fcb4 	bl	80005d0 <LCD_Clear>
      LCD_SetTextColor(LCD_COLOR_BLUE);
 8001c68:	201f      	movs	r0, #31
 8001c6a:	f7fe fcab 	bl	80005c4 <LCD_SetTextColor>
      LCD_DrawFullRect(20, 140, 100, 40);
 8001c6e:	2328      	movs	r3, #40	; 0x28
 8001c70:	2264      	movs	r2, #100	; 0x64
 8001c72:	218c      	movs	r1, #140	; 0x8c
 8001c74:	2014      	movs	r0, #20
 8001c76:	f7fe fcf1 	bl	800065c <LCD_DrawFullRect>
      LCD_FillTriangle(120, 120, 235, 60, 260, 160);
 8001c7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c7e:	23a0      	movs	r3, #160	; 0xa0
 8001c80:	2178      	movs	r1, #120	; 0x78
 8001c82:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001c86:	4608      	mov	r0, r1
 8001c88:	233c      	movs	r3, #60	; 0x3c
 8001c8a:	22eb      	movs	r2, #235	; 0xeb
 8001c8c:	e7a1      	b.n	8001bd2 <main+0x1e2>
 8001c8e:	bf00      	nop
 8001c90:	20000074 	.word	0x20000074
 8001c94:	e000e010 	.word	0xe000e010
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	20000084 	.word	0x20000084
 8001ca0:	20000058 	.word	0x20000058
 8001ca4:	20000090 	.word	0x20000090
 8001ca8:	20000050 	.word	0x20000050
 8001cac:	43fa0000 	.word	0x43fa0000
 8001cb0:	2000004c 	.word	0x2000004c
 8001cb4:	20000054 	.word	0x20000054
 8001cb8:	2000005c 	.word	0x2000005c

08001cbc <L3GD20_TIMEOUT_UserCallback>:
* @retval None.
*/
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
  return 0;
}
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	4770      	bx	lr

08001cc0 <TimingDelay_Decrement>:
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <TimingDelay_Decrement+0x10>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	b112      	cbz	r2, 8001ccc <TimingDelay_Decrement+0xc>
  { 
    TimingDelay--;
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000048 	.word	0x20000048

08001cd4 <NMI_Handler>:
 8001cd4:	4770      	bx	lr

08001cd6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler>

08001cd8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler>

08001cda <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001cda:	e7fe      	b.n	8001cda <BusFault_Handler>

08001cdc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler>

08001cde <SVC_Handler>:
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:
 8001ce0:	4770      	bx	lr

08001ce2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    TimingDelay_Decrement();
 8001ce4:	f7ff bfec 	b.w	8001cc0 <TimingDelay_Decrement>

08001ce8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <SystemInit+0x100>)
 8001cea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <SystemInit+0x104>)
 8001cf8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cfa:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001d02:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d10:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <SystemInit+0x108>)
 8001d12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d14:	681a      	ldr	r2, [r3, #0]
{
 8001d16:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d1e:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001d20:	9100      	str	r1, [sp, #0]
 8001d22:	9101      	str	r1, [sp, #4]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d34:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8001d36:	9a00      	ldr	r2, [sp, #0]
 8001d38:	3201      	adds	r2, #1
 8001d3a:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001d3c:	9a01      	ldr	r2, [sp, #4]
 8001d3e:	b91a      	cbnz	r2, 8001d48 <SystemInit+0x60>
 8001d40:	9a00      	ldr	r2, [sp, #0]
 8001d42:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8001d46:	d1f2      	bne.n	8001d2e <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001d48:	680b      	ldr	r3, [r1, #0]
 8001d4a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001d4e:	bf18      	it	ne
 8001d50:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001d52:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001d54:	9b01      	ldr	r3, [sp, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <SystemInit+0x104>)
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001d5a:	bf04      	itt	eq
 8001d5c:	4a25      	ldreq	r2, [pc, #148]	; (8001df4 <SystemInit+0x10c>)
 8001d5e:	605a      	streq	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <SystemInit+0x110>)
 8001d6a:	6811      	ldr	r1, [r2, #0]
 8001d6c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001d70:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	6099      	str	r1, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001d76:	6899      	ldr	r1, [r3, #8]
 8001d78:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001d7c:	6099      	str	r1, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 8001d84:	6099      	str	r1, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001d8c:	6019      	str	r1, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d8e:	4917      	ldr	r1, [pc, #92]	; (8001dec <SystemInit+0x104>)
 8001d90:	680b      	ldr	r3, [r1, #0]
 8001d92:	0198      	lsls	r0, r3, #6
 8001d94:	d5fc      	bpl.n	8001d90 <SystemInit+0xa8>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <SystemInit+0x110>)
 8001da0:	4619      	mov	r1, r3
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	03d2      	lsls	r2, r2, #15
 8001da6:	d5fc      	bpl.n	8001da2 <SystemInit+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dae:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8001db0:	684b      	ldr	r3, [r1, #4]
 8001db2:	039b      	lsls	r3, r3, #14
 8001db4:	d5fc      	bpl.n	8001db0 <SystemInit+0xc8>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <SystemInit+0x114>)
 8001db8:	f240 7205 	movw	r2, #1797	; 0x705
 8001dbc:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001dbe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	f022 0203 	bic.w	r2, r2, #3
 8001dc8:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	f042 0202 	orr.w	r2, r2, #2
 8001dd0:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	f002 020c 	and.w	r2, r2, #12
 8001dd8:	2a08      	cmp	r2, #8
 8001dda:	d1fa      	bne.n	8001dd2 <SystemInit+0xea>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ddc:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <SystemInit+0x100>)
 8001dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de2:	609a      	str	r2, [r3, #8]
}
 8001de4:	b002      	add	sp, #8
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	24003010 	.word	0x24003010
 8001df4:	07405a08 	.word	0x07405a08
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	4e0d      	ldr	r6, [pc, #52]	; (8001e38 <__libc_init_array+0x38>)
 8001e04:	4c0d      	ldr	r4, [pc, #52]	; (8001e3c <__libc_init_array+0x3c>)
 8001e06:	1ba4      	subs	r4, r4, r6
 8001e08:	10a4      	asrs	r4, r4, #2
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	42a5      	cmp	r5, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	4e0b      	ldr	r6, [pc, #44]	; (8001e40 <__libc_init_array+0x40>)
 8001e12:	4c0c      	ldr	r4, [pc, #48]	; (8001e44 <__libc_init_array+0x44>)
 8001e14:	f000 f818 	bl	8001e48 <_init>
 8001e18:	1ba4      	subs	r4, r4, r6
 8001e1a:	10a4      	asrs	r4, r4, #2
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e28:	4798      	blx	r3
 8001e2a:	3501      	adds	r5, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e32:	4798      	blx	r3
 8001e34:	3501      	adds	r5, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08003030 	.word	0x08003030
 8001e3c:	08003030 	.word	0x08003030
 8001e40:	08003030 	.word	0x08003030
 8001e44:	08003034 	.word	0x08003034

08001e48 <_init>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr

08001e54 <_fini>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	bf00      	nop
 8001e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5a:	bc08      	pop	{r3}
 8001e5c:	469e      	mov	lr, r3
 8001e5e:	4770      	bx	lr
